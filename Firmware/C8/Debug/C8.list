
C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ac8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08003b88  08003b88  00004b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c54  08003c54  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003c54  08003c54  00004c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c5c  08003c5c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c5c  08003c5c  00004c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c60  08003c60  00004c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003c64  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  2000000c  08003c70  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08003c70  000051d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001069d  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ffe  00000000  00000000  000156d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  000176d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000beb  00000000  00000000  000185e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189df  00000000  00000000  000191cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120d4  00000000  00000000  00031baa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a21b0  00000000  00000000  00043c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e5e2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000371c  00000000  00000000  000e5e74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000e9590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003b70 	.word	0x08003b70

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003b70 	.word	0x08003b70

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	4657      	mov	r7, sl
 8000264:	464e      	mov	r6, r9
 8000266:	4645      	mov	r5, r8
 8000268:	46de      	mov	lr, fp
 800026a:	b5e0      	push	{r5, r6, r7, lr}
 800026c:	0004      	movs	r4, r0
 800026e:	000d      	movs	r5, r1
 8000270:	4692      	mov	sl, r2
 8000272:	4699      	mov	r9, r3
 8000274:	b083      	sub	sp, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d830      	bhi.n	80002dc <__udivmoddi4+0x7c>
 800027a:	d02d      	beq.n	80002d8 <__udivmoddi4+0x78>
 800027c:	4649      	mov	r1, r9
 800027e:	4650      	mov	r0, sl
 8000280:	f000 f8ba 	bl	80003f8 <__clzdi2>
 8000284:	0029      	movs	r1, r5
 8000286:	0006      	movs	r6, r0
 8000288:	0020      	movs	r0, r4
 800028a:	f000 f8b5 	bl	80003f8 <__clzdi2>
 800028e:	1a33      	subs	r3, r6, r0
 8000290:	4698      	mov	r8, r3
 8000292:	3b20      	subs	r3, #32
 8000294:	d434      	bmi.n	8000300 <__udivmoddi4+0xa0>
 8000296:	469b      	mov	fp, r3
 8000298:	4653      	mov	r3, sl
 800029a:	465a      	mov	r2, fp
 800029c:	4093      	lsls	r3, r2
 800029e:	4642      	mov	r2, r8
 80002a0:	001f      	movs	r7, r3
 80002a2:	4653      	mov	r3, sl
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d83b      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80002ac:	42af      	cmp	r7, r5
 80002ae:	d100      	bne.n	80002b2 <__udivmoddi4+0x52>
 80002b0:	e079      	b.n	80003a6 <__udivmoddi4+0x146>
 80002b2:	465b      	mov	r3, fp
 80002b4:	1ba4      	subs	r4, r4, r6
 80002b6:	41bd      	sbcs	r5, r7
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	da00      	bge.n	80002be <__udivmoddi4+0x5e>
 80002bc:	e076      	b.n	80003ac <__udivmoddi4+0x14c>
 80002be:	2200      	movs	r2, #0
 80002c0:	2300      	movs	r3, #0
 80002c2:	9200      	str	r2, [sp, #0]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	2301      	movs	r3, #1
 80002c8:	465a      	mov	r2, fp
 80002ca:	4093      	lsls	r3, r2
 80002cc:	9301      	str	r3, [sp, #4]
 80002ce:	2301      	movs	r3, #1
 80002d0:	4642      	mov	r2, r8
 80002d2:	4093      	lsls	r3, r2
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	e029      	b.n	800032c <__udivmoddi4+0xcc>
 80002d8:	4282      	cmp	r2, r0
 80002da:	d9cf      	bls.n	800027c <__udivmoddi4+0x1c>
 80002dc:	2200      	movs	r2, #0
 80002de:	2300      	movs	r3, #0
 80002e0:	9200      	str	r2, [sp, #0]
 80002e2:	9301      	str	r3, [sp, #4]
 80002e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <__udivmoddi4+0x8e>
 80002ea:	601c      	str	r4, [r3, #0]
 80002ec:	605d      	str	r5, [r3, #4]
 80002ee:	9800      	ldr	r0, [sp, #0]
 80002f0:	9901      	ldr	r1, [sp, #4]
 80002f2:	b003      	add	sp, #12
 80002f4:	bcf0      	pop	{r4, r5, r6, r7}
 80002f6:	46bb      	mov	fp, r7
 80002f8:	46b2      	mov	sl, r6
 80002fa:	46a9      	mov	r9, r5
 80002fc:	46a0      	mov	r8, r4
 80002fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000300:	4642      	mov	r2, r8
 8000302:	469b      	mov	fp, r3
 8000304:	2320      	movs	r3, #32
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	4652      	mov	r2, sl
 800030a:	40da      	lsrs	r2, r3
 800030c:	4641      	mov	r1, r8
 800030e:	0013      	movs	r3, r2
 8000310:	464a      	mov	r2, r9
 8000312:	408a      	lsls	r2, r1
 8000314:	0017      	movs	r7, r2
 8000316:	4642      	mov	r2, r8
 8000318:	431f      	orrs	r7, r3
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	001e      	movs	r6, r3
 8000320:	42af      	cmp	r7, r5
 8000322:	d9c3      	bls.n	80002ac <__udivmoddi4+0x4c>
 8000324:	2200      	movs	r2, #0
 8000326:	2300      	movs	r3, #0
 8000328:	9200      	str	r2, [sp, #0]
 800032a:	9301      	str	r3, [sp, #4]
 800032c:	4643      	mov	r3, r8
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0d8      	beq.n	80002e4 <__udivmoddi4+0x84>
 8000332:	07fb      	lsls	r3, r7, #31
 8000334:	0872      	lsrs	r2, r6, #1
 8000336:	431a      	orrs	r2, r3
 8000338:	4646      	mov	r6, r8
 800033a:	087b      	lsrs	r3, r7, #1
 800033c:	e00e      	b.n	800035c <__udivmoddi4+0xfc>
 800033e:	42ab      	cmp	r3, r5
 8000340:	d101      	bne.n	8000346 <__udivmoddi4+0xe6>
 8000342:	42a2      	cmp	r2, r4
 8000344:	d80c      	bhi.n	8000360 <__udivmoddi4+0x100>
 8000346:	1aa4      	subs	r4, r4, r2
 8000348:	419d      	sbcs	r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	1924      	adds	r4, r4, r4
 800034e:	416d      	adcs	r5, r5
 8000350:	2100      	movs	r1, #0
 8000352:	3e01      	subs	r6, #1
 8000354:	1824      	adds	r4, r4, r0
 8000356:	414d      	adcs	r5, r1
 8000358:	2e00      	cmp	r6, #0
 800035a:	d006      	beq.n	800036a <__udivmoddi4+0x10a>
 800035c:	42ab      	cmp	r3, r5
 800035e:	d9ee      	bls.n	800033e <__udivmoddi4+0xde>
 8000360:	3e01      	subs	r6, #1
 8000362:	1924      	adds	r4, r4, r4
 8000364:	416d      	adcs	r5, r5
 8000366:	2e00      	cmp	r6, #0
 8000368:	d1f8      	bne.n	800035c <__udivmoddi4+0xfc>
 800036a:	9800      	ldr	r0, [sp, #0]
 800036c:	9901      	ldr	r1, [sp, #4]
 800036e:	465b      	mov	r3, fp
 8000370:	1900      	adds	r0, r0, r4
 8000372:	4169      	adcs	r1, r5
 8000374:	2b00      	cmp	r3, #0
 8000376:	db24      	blt.n	80003c2 <__udivmoddi4+0x162>
 8000378:	002b      	movs	r3, r5
 800037a:	465a      	mov	r2, fp
 800037c:	4644      	mov	r4, r8
 800037e:	40d3      	lsrs	r3, r2
 8000380:	002a      	movs	r2, r5
 8000382:	40e2      	lsrs	r2, r4
 8000384:	001c      	movs	r4, r3
 8000386:	465b      	mov	r3, fp
 8000388:	0015      	movs	r5, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	db2a      	blt.n	80003e4 <__udivmoddi4+0x184>
 800038e:	0026      	movs	r6, r4
 8000390:	409e      	lsls	r6, r3
 8000392:	0033      	movs	r3, r6
 8000394:	0026      	movs	r6, r4
 8000396:	4647      	mov	r7, r8
 8000398:	40be      	lsls	r6, r7
 800039a:	0032      	movs	r2, r6
 800039c:	1a80      	subs	r0, r0, r2
 800039e:	4199      	sbcs	r1, r3
 80003a0:	9000      	str	r0, [sp, #0]
 80003a2:	9101      	str	r1, [sp, #4]
 80003a4:	e79e      	b.n	80002e4 <__udivmoddi4+0x84>
 80003a6:	42a3      	cmp	r3, r4
 80003a8:	d8bc      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80003aa:	e782      	b.n	80002b2 <__udivmoddi4+0x52>
 80003ac:	4642      	mov	r2, r8
 80003ae:	2320      	movs	r3, #32
 80003b0:	2100      	movs	r1, #0
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	2200      	movs	r2, #0
 80003b6:	9100      	str	r1, [sp, #0]
 80003b8:	9201      	str	r2, [sp, #4]
 80003ba:	2201      	movs	r2, #1
 80003bc:	40da      	lsrs	r2, r3
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	e785      	b.n	80002ce <__udivmoddi4+0x6e>
 80003c2:	4642      	mov	r2, r8
 80003c4:	2320      	movs	r3, #32
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	002a      	movs	r2, r5
 80003ca:	4646      	mov	r6, r8
 80003cc:	409a      	lsls	r2, r3
 80003ce:	0023      	movs	r3, r4
 80003d0:	40f3      	lsrs	r3, r6
 80003d2:	4644      	mov	r4, r8
 80003d4:	4313      	orrs	r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	40e2      	lsrs	r2, r4
 80003da:	001c      	movs	r4, r3
 80003dc:	465b      	mov	r3, fp
 80003de:	0015      	movs	r5, r2
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	dad4      	bge.n	800038e <__udivmoddi4+0x12e>
 80003e4:	4642      	mov	r2, r8
 80003e6:	002f      	movs	r7, r5
 80003e8:	2320      	movs	r3, #32
 80003ea:	0026      	movs	r6, r4
 80003ec:	4097      	lsls	r7, r2
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	40de      	lsrs	r6, r3
 80003f2:	003b      	movs	r3, r7
 80003f4:	4333      	orrs	r3, r6
 80003f6:	e7cd      	b.n	8000394 <__udivmoddi4+0x134>

080003f8 <__clzdi2>:
 80003f8:	b510      	push	{r4, lr}
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d103      	bne.n	8000406 <__clzdi2+0xe>
 80003fe:	f000 f807 	bl	8000410 <__clzsi2>
 8000402:	3020      	adds	r0, #32
 8000404:	e002      	b.n	800040c <__clzdi2+0x14>
 8000406:	0008      	movs	r0, r1
 8000408:	f000 f802 	bl	8000410 <__clzsi2>
 800040c:	bd10      	pop	{r4, pc}
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__clzsi2>:
 8000410:	211c      	movs	r1, #28
 8000412:	2301      	movs	r3, #1
 8000414:	041b      	lsls	r3, r3, #16
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0xe>
 800041a:	0c00      	lsrs	r0, r0, #16
 800041c:	3910      	subs	r1, #16
 800041e:	0a1b      	lsrs	r3, r3, #8
 8000420:	4298      	cmp	r0, r3
 8000422:	d301      	bcc.n	8000428 <__clzsi2+0x18>
 8000424:	0a00      	lsrs	r0, r0, #8
 8000426:	3908      	subs	r1, #8
 8000428:	091b      	lsrs	r3, r3, #4
 800042a:	4298      	cmp	r0, r3
 800042c:	d301      	bcc.n	8000432 <__clzsi2+0x22>
 800042e:	0900      	lsrs	r0, r0, #4
 8000430:	3904      	subs	r1, #4
 8000432:	a202      	add	r2, pc, #8	@ (adr r2, 800043c <__clzsi2+0x2c>)
 8000434:	5c10      	ldrb	r0, [r2, r0]
 8000436:	1840      	adds	r0, r0, r1
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	02020304 	.word	0x02020304
 8000440:	01010101 	.word	0x01010101
	...

0800044c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000450:	f000 fc38 	bl	8000cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000454:	f000 f80c 	bl	8000470 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000458:	f000 f9ee 	bl	8000838 <MX_GPIO_Init>
  MX_SPI1_Init();
 800045c:	f000 f866 	bl	800052c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000460:	f000 f8a2 	bl	80005a8 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000464:	f000 f8de 	bl	8000624 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000468:	f000 f9b2 	bl	80007d0 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800046c:	46c0      	nop			@ (mov r8, r8)
 800046e:	e7fd      	b.n	800046c <main+0x20>

08000470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000470:	b590      	push	{r4, r7, lr}
 8000472:	b093      	sub	sp, #76	@ 0x4c
 8000474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000476:	2410      	movs	r4, #16
 8000478:	193b      	adds	r3, r7, r4
 800047a:	0018      	movs	r0, r3
 800047c:	2338      	movs	r3, #56	@ 0x38
 800047e:	001a      	movs	r2, r3
 8000480:	2100      	movs	r1, #0
 8000482:	f003 fb49 	bl	8003b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000486:	003b      	movs	r3, r7
 8000488:	0018      	movs	r0, r3
 800048a:	2310      	movs	r3, #16
 800048c:	001a      	movs	r2, r3
 800048e:	2100      	movs	r1, #0
 8000490:	f003 fb42 	bl	8003b18 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000494:	2380      	movs	r3, #128	@ 0x80
 8000496:	009b      	lsls	r3, r3, #2
 8000498:	0018      	movs	r0, r3
 800049a:	f000 fecf 	bl	800123c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800049e:	193b      	adds	r3, r7, r4
 80004a0:	2202      	movs	r2, #2
 80004a2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	2280      	movs	r2, #128	@ 0x80
 80004a8:	0052      	lsls	r2, r2, #1
 80004aa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004ac:	0021      	movs	r1, r4
 80004ae:	187b      	adds	r3, r7, r1
 80004b0:	2200      	movs	r2, #0
 80004b2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004b4:	187b      	adds	r3, r7, r1
 80004b6:	2240      	movs	r2, #64	@ 0x40
 80004b8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2202      	movs	r2, #2
 80004be:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004c0:	187b      	adds	r3, r7, r1
 80004c2:	2202      	movs	r2, #2
 80004c4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2200      	movs	r2, #0
 80004ca:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2208      	movs	r2, #8
 80004d0:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2280      	movs	r2, #128	@ 0x80
 80004d6:	0292      	lsls	r2, r2, #10
 80004d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80004da:	187b      	adds	r3, r7, r1
 80004dc:	22c0      	movs	r2, #192	@ 0xc0
 80004de:	04d2      	lsls	r2, r2, #19
 80004e0:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004e2:	187b      	adds	r3, r7, r1
 80004e4:	2280      	movs	r2, #128	@ 0x80
 80004e6:	0592      	lsls	r2, r2, #22
 80004e8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ea:	187b      	adds	r3, r7, r1
 80004ec:	0018      	movs	r0, r3
 80004ee:	f000 fef1 	bl	80012d4 <HAL_RCC_OscConfig>
 80004f2:	1e03      	subs	r3, r0, #0
 80004f4:	d001      	beq.n	80004fa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80004f6:	f000 fa17 	bl	8000928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004fa:	003b      	movs	r3, r7
 80004fc:	2207      	movs	r2, #7
 80004fe:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000500:	003b      	movs	r3, r7
 8000502:	2202      	movs	r2, #2
 8000504:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000506:	003b      	movs	r3, r7
 8000508:	2200      	movs	r2, #0
 800050a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800050c:	003b      	movs	r3, r7
 800050e:	2200      	movs	r2, #0
 8000510:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000512:	003b      	movs	r3, r7
 8000514:	2102      	movs	r1, #2
 8000516:	0018      	movs	r0, r3
 8000518:	f001 f9f6 	bl	8001908 <HAL_RCC_ClockConfig>
 800051c:	1e03      	subs	r3, r0, #0
 800051e:	d001      	beq.n	8000524 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000520:	f000 fa02 	bl	8000928 <Error_Handler>
  }
}
 8000524:	46c0      	nop			@ (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	b013      	add	sp, #76	@ 0x4c
 800052a:	bd90      	pop	{r4, r7, pc}

0800052c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000530:	4b1b      	ldr	r3, [pc, #108]	@ (80005a0 <MX_SPI1_Init+0x74>)
 8000532:	4a1c      	ldr	r2, [pc, #112]	@ (80005a4 <MX_SPI1_Init+0x78>)
 8000534:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000536:	4b1a      	ldr	r3, [pc, #104]	@ (80005a0 <MX_SPI1_Init+0x74>)
 8000538:	2282      	movs	r2, #130	@ 0x82
 800053a:	0052      	lsls	r2, r2, #1
 800053c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800053e:	4b18      	ldr	r3, [pc, #96]	@ (80005a0 <MX_SPI1_Init+0x74>)
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000544:	4b16      	ldr	r3, [pc, #88]	@ (80005a0 <MX_SPI1_Init+0x74>)
 8000546:	22c0      	movs	r2, #192	@ 0xc0
 8000548:	0092      	lsls	r2, r2, #2
 800054a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800054c:	4b14      	ldr	r3, [pc, #80]	@ (80005a0 <MX_SPI1_Init+0x74>)
 800054e:	2200      	movs	r2, #0
 8000550:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000552:	4b13      	ldr	r3, [pc, #76]	@ (80005a0 <MX_SPI1_Init+0x74>)
 8000554:	2200      	movs	r2, #0
 8000556:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000558:	4b11      	ldr	r3, [pc, #68]	@ (80005a0 <MX_SPI1_Init+0x74>)
 800055a:	2280      	movs	r2, #128	@ 0x80
 800055c:	0092      	lsls	r2, r2, #2
 800055e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000560:	4b0f      	ldr	r3, [pc, #60]	@ (80005a0 <MX_SPI1_Init+0x74>)
 8000562:	2200      	movs	r2, #0
 8000564:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000566:	4b0e      	ldr	r3, [pc, #56]	@ (80005a0 <MX_SPI1_Init+0x74>)
 8000568:	2200      	movs	r2, #0
 800056a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800056c:	4b0c      	ldr	r3, [pc, #48]	@ (80005a0 <MX_SPI1_Init+0x74>)
 800056e:	2200      	movs	r2, #0
 8000570:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000572:	4b0b      	ldr	r3, [pc, #44]	@ (80005a0 <MX_SPI1_Init+0x74>)
 8000574:	2200      	movs	r2, #0
 8000576:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000578:	4b09      	ldr	r3, [pc, #36]	@ (80005a0 <MX_SPI1_Init+0x74>)
 800057a:	2207      	movs	r2, #7
 800057c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800057e:	4b08      	ldr	r3, [pc, #32]	@ (80005a0 <MX_SPI1_Init+0x74>)
 8000580:	2200      	movs	r2, #0
 8000582:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000584:	4b06      	ldr	r3, [pc, #24]	@ (80005a0 <MX_SPI1_Init+0x74>)
 8000586:	2208      	movs	r2, #8
 8000588:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800058a:	4b05      	ldr	r3, [pc, #20]	@ (80005a0 <MX_SPI1_Init+0x74>)
 800058c:	0018      	movs	r0, r3
 800058e:	f001 fd3d 	bl	800200c <HAL_SPI_Init>
 8000592:	1e03      	subs	r3, r0, #0
 8000594:	d001      	beq.n	800059a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000596:	f000 f9c7 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800059a:	46c0      	nop			@ (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000028 	.word	0x20000028
 80005a4:	40013000 	.word	0x40013000

080005a8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80005ac:	4b1b      	ldr	r3, [pc, #108]	@ (800061c <MX_SPI2_Init+0x74>)
 80005ae:	4a1c      	ldr	r2, [pc, #112]	@ (8000620 <MX_SPI2_Init+0x78>)
 80005b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80005b2:	4b1a      	ldr	r3, [pc, #104]	@ (800061c <MX_SPI2_Init+0x74>)
 80005b4:	2282      	movs	r2, #130	@ 0x82
 80005b6:	0052      	lsls	r2, r2, #1
 80005b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80005ba:	4b18      	ldr	r3, [pc, #96]	@ (800061c <MX_SPI2_Init+0x74>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80005c0:	4b16      	ldr	r3, [pc, #88]	@ (800061c <MX_SPI2_Init+0x74>)
 80005c2:	22c0      	movs	r2, #192	@ 0xc0
 80005c4:	0092      	lsls	r2, r2, #2
 80005c6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005c8:	4b14      	ldr	r3, [pc, #80]	@ (800061c <MX_SPI2_Init+0x74>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005ce:	4b13      	ldr	r3, [pc, #76]	@ (800061c <MX_SPI2_Init+0x74>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80005d4:	4b11      	ldr	r3, [pc, #68]	@ (800061c <MX_SPI2_Init+0x74>)
 80005d6:	2280      	movs	r2, #128	@ 0x80
 80005d8:	0092      	lsls	r2, r2, #2
 80005da:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80005dc:	4b0f      	ldr	r3, [pc, #60]	@ (800061c <MX_SPI2_Init+0x74>)
 80005de:	2200      	movs	r2, #0
 80005e0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005e2:	4b0e      	ldr	r3, [pc, #56]	@ (800061c <MX_SPI2_Init+0x74>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80005e8:	4b0c      	ldr	r3, [pc, #48]	@ (800061c <MX_SPI2_Init+0x74>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005ee:	4b0b      	ldr	r3, [pc, #44]	@ (800061c <MX_SPI2_Init+0x74>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80005f4:	4b09      	ldr	r3, [pc, #36]	@ (800061c <MX_SPI2_Init+0x74>)
 80005f6:	2207      	movs	r2, #7
 80005f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005fa:	4b08      	ldr	r3, [pc, #32]	@ (800061c <MX_SPI2_Init+0x74>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000600:	4b06      	ldr	r3, [pc, #24]	@ (800061c <MX_SPI2_Init+0x74>)
 8000602:	2208      	movs	r2, #8
 8000604:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000606:	4b05      	ldr	r3, [pc, #20]	@ (800061c <MX_SPI2_Init+0x74>)
 8000608:	0018      	movs	r0, r3
 800060a:	f001 fcff 	bl	800200c <HAL_SPI_Init>
 800060e:	1e03      	subs	r3, r0, #0
 8000610:	d001      	beq.n	8000616 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000612:	f000 f989 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000616:	46c0      	nop			@ (mov r8, r8)
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	2000008c 	.word	0x2000008c
 8000620:	40003800 	.word	0x40003800

08000624 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b09c      	sub	sp, #112	@ 0x70
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800062a:	2360      	movs	r3, #96	@ 0x60
 800062c:	18fb      	adds	r3, r7, r3
 800062e:	0018      	movs	r0, r3
 8000630:	2310      	movs	r3, #16
 8000632:	001a      	movs	r2, r3
 8000634:	2100      	movs	r1, #0
 8000636:	f003 fa6f 	bl	8003b18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800063a:	2354      	movs	r3, #84	@ 0x54
 800063c:	18fb      	adds	r3, r7, r3
 800063e:	0018      	movs	r0, r3
 8000640:	230c      	movs	r3, #12
 8000642:	001a      	movs	r2, r3
 8000644:	2100      	movs	r1, #0
 8000646:	f003 fa67 	bl	8003b18 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800064a:	2338      	movs	r3, #56	@ 0x38
 800064c:	18fb      	adds	r3, r7, r3
 800064e:	0018      	movs	r0, r3
 8000650:	231c      	movs	r3, #28
 8000652:	001a      	movs	r2, r3
 8000654:	2100      	movs	r1, #0
 8000656:	f003 fa5f 	bl	8003b18 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	0018      	movs	r0, r3
 800065e:	2334      	movs	r3, #52	@ 0x34
 8000660:	001a      	movs	r2, r3
 8000662:	2100      	movs	r1, #0
 8000664:	f003 fa58 	bl	8003b18 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000668:	4b56      	ldr	r3, [pc, #344]	@ (80007c4 <MX_TIM1_Init+0x1a0>)
 800066a:	4a57      	ldr	r2, [pc, #348]	@ (80007c8 <MX_TIM1_Init+0x1a4>)
 800066c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800066e:	4b55      	ldr	r3, [pc, #340]	@ (80007c4 <MX_TIM1_Init+0x1a0>)
 8000670:	2200      	movs	r2, #0
 8000672:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000674:	4b53      	ldr	r3, [pc, #332]	@ (80007c4 <MX_TIM1_Init+0x1a0>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800067a:	4b52      	ldr	r3, [pc, #328]	@ (80007c4 <MX_TIM1_Init+0x1a0>)
 800067c:	4a53      	ldr	r2, [pc, #332]	@ (80007cc <MX_TIM1_Init+0x1a8>)
 800067e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000680:	4b50      	ldr	r3, [pc, #320]	@ (80007c4 <MX_TIM1_Init+0x1a0>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000686:	4b4f      	ldr	r3, [pc, #316]	@ (80007c4 <MX_TIM1_Init+0x1a0>)
 8000688:	2200      	movs	r2, #0
 800068a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800068c:	4b4d      	ldr	r3, [pc, #308]	@ (80007c4 <MX_TIM1_Init+0x1a0>)
 800068e:	2200      	movs	r2, #0
 8000690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000692:	4b4c      	ldr	r3, [pc, #304]	@ (80007c4 <MX_TIM1_Init+0x1a0>)
 8000694:	0018      	movs	r0, r3
 8000696:	f001 fd71 	bl	800217c <HAL_TIM_Base_Init>
 800069a:	1e03      	subs	r3, r0, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800069e:	f000 f943 	bl	8000928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006a2:	2160      	movs	r1, #96	@ 0x60
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2280      	movs	r2, #128	@ 0x80
 80006a8:	0152      	lsls	r2, r2, #5
 80006aa:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006ac:	187a      	adds	r2, r7, r1
 80006ae:	4b45      	ldr	r3, [pc, #276]	@ (80007c4 <MX_TIM1_Init+0x1a0>)
 80006b0:	0011      	movs	r1, r2
 80006b2:	0018      	movs	r0, r3
 80006b4:	f001 ff1a 	bl	80024ec <HAL_TIM_ConfigClockSource>
 80006b8:	1e03      	subs	r3, r0, #0
 80006ba:	d001      	beq.n	80006c0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80006bc:	f000 f934 	bl	8000928 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006c0:	4b40      	ldr	r3, [pc, #256]	@ (80007c4 <MX_TIM1_Init+0x1a0>)
 80006c2:	0018      	movs	r0, r3
 80006c4:	f001 fdb2 	bl	800222c <HAL_TIM_PWM_Init>
 80006c8:	1e03      	subs	r3, r0, #0
 80006ca:	d001      	beq.n	80006d0 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80006cc:	f000 f92c 	bl	8000928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d0:	2154      	movs	r1, #84	@ 0x54
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2200      	movs	r2, #0
 80006dc:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006e4:	187a      	adds	r2, r7, r1
 80006e6:	4b37      	ldr	r3, [pc, #220]	@ (80007c4 <MX_TIM1_Init+0x1a0>)
 80006e8:	0011      	movs	r1, r2
 80006ea:	0018      	movs	r0, r3
 80006ec:	f002 fbc2 	bl	8002e74 <HAL_TIMEx_MasterConfigSynchronization>
 80006f0:	1e03      	subs	r3, r0, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80006f4:	f000 f918 	bl	8000928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006f8:	2138      	movs	r1, #56	@ 0x38
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2260      	movs	r2, #96	@ 0x60
 80006fe:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2200      	movs	r2, #0
 8000704:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000718:	187b      	adds	r3, r7, r1
 800071a:	2200      	movs	r2, #0
 800071c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000724:	1879      	adds	r1, r7, r1
 8000726:	4b27      	ldr	r3, [pc, #156]	@ (80007c4 <MX_TIM1_Init+0x1a0>)
 8000728:	2200      	movs	r2, #0
 800072a:	0018      	movs	r0, r3
 800072c:	f001 fdde 	bl	80022ec <HAL_TIM_PWM_ConfigChannel>
 8000730:	1e03      	subs	r3, r0, #0
 8000732:	d001      	beq.n	8000738 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000734:	f000 f8f8 	bl	8000928 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000738:	2338      	movs	r3, #56	@ 0x38
 800073a:	18f9      	adds	r1, r7, r3
 800073c:	4b21      	ldr	r3, [pc, #132]	@ (80007c4 <MX_TIM1_Init+0x1a0>)
 800073e:	2204      	movs	r2, #4
 8000740:	0018      	movs	r0, r3
 8000742:	f001 fdd3 	bl	80022ec <HAL_TIM_PWM_ConfigChannel>
 8000746:	1e03      	subs	r3, r0, #0
 8000748:	d001      	beq.n	800074e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800074a:	f000 f8ed 	bl	8000928 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	2200      	movs	r2, #0
 8000758:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	2280      	movs	r2, #128	@ 0x80
 8000770:	0192      	lsls	r2, r2, #6
 8000772:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	2200      	movs	r2, #0
 8000778:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	2200      	movs	r2, #0
 800077e:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2200      	movs	r2, #0
 8000784:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2280      	movs	r2, #128	@ 0x80
 800078a:	0492      	lsls	r2, r2, #18
 800078c:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	2200      	movs	r2, #0
 8000792:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2200      	movs	r2, #0
 8000798:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2200      	movs	r2, #0
 800079e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007a0:	1d3a      	adds	r2, r7, #4
 80007a2:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <MX_TIM1_Init+0x1a0>)
 80007a4:	0011      	movs	r1, r2
 80007a6:	0018      	movs	r0, r3
 80007a8:	f002 fbd2 	bl	8002f50 <HAL_TIMEx_ConfigBreakDeadTime>
 80007ac:	1e03      	subs	r3, r0, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 80007b0:	f000 f8ba 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007b4:	4b03      	ldr	r3, [pc, #12]	@ (80007c4 <MX_TIM1_Init+0x1a0>)
 80007b6:	0018      	movs	r0, r3
 80007b8:	f000 f9b2 	bl	8000b20 <HAL_TIM_MspPostInit>

}
 80007bc:	46c0      	nop			@ (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	b01c      	add	sp, #112	@ 0x70
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	200000f0 	.word	0x200000f0
 80007c8:	40012c00 	.word	0x40012c00
 80007cc:	0000ffff 	.word	0x0000ffff

080007d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007d4:	4b16      	ldr	r3, [pc, #88]	@ (8000830 <MX_USART3_UART_Init+0x60>)
 80007d6:	4a17      	ldr	r2, [pc, #92]	@ (8000834 <MX_USART3_UART_Init+0x64>)
 80007d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007da:	4b15      	ldr	r3, [pc, #84]	@ (8000830 <MX_USART3_UART_Init+0x60>)
 80007dc:	22e1      	movs	r2, #225	@ 0xe1
 80007de:	0252      	lsls	r2, r2, #9
 80007e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	4b13      	ldr	r3, [pc, #76]	@ (8000830 <MX_USART3_UART_Init+0x60>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007e8:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <MX_USART3_UART_Init+0x60>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ee:	4b10      	ldr	r3, [pc, #64]	@ (8000830 <MX_USART3_UART_Init+0x60>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <MX_USART3_UART_Init+0x60>)
 80007f6:	220c      	movs	r2, #12
 80007f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000830 <MX_USART3_UART_Init+0x60>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000800:	4b0b      	ldr	r3, [pc, #44]	@ (8000830 <MX_USART3_UART_Init+0x60>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000806:	4b0a      	ldr	r3, [pc, #40]	@ (8000830 <MX_USART3_UART_Init+0x60>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800080c:	4b08      	ldr	r3, [pc, #32]	@ (8000830 <MX_USART3_UART_Init+0x60>)
 800080e:	2200      	movs	r2, #0
 8000810:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000812:	4b07      	ldr	r3, [pc, #28]	@ (8000830 <MX_USART3_UART_Init+0x60>)
 8000814:	2200      	movs	r2, #0
 8000816:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000818:	4b05      	ldr	r3, [pc, #20]	@ (8000830 <MX_USART3_UART_Init+0x60>)
 800081a:	0018      	movs	r0, r3
 800081c:	f002 fc34 	bl	8003088 <HAL_UART_Init>
 8000820:	1e03      	subs	r3, r0, #0
 8000822:	d001      	beq.n	8000828 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000824:	f000 f880 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000828:	46c0      	nop			@ (mov r8, r8)
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	46c0      	nop			@ (mov r8, r8)
 8000830:	2000013c 	.word	0x2000013c
 8000834:	40004800 	.word	0x40004800

08000838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b089      	sub	sp, #36	@ 0x24
 800083c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	240c      	movs	r4, #12
 8000840:	193b      	adds	r3, r7, r4
 8000842:	0018      	movs	r0, r3
 8000844:	2314      	movs	r3, #20
 8000846:	001a      	movs	r2, r3
 8000848:	2100      	movs	r1, #0
 800084a:	f003 f965 	bl	8003b18 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	4b33      	ldr	r3, [pc, #204]	@ (800091c <MX_GPIO_Init+0xe4>)
 8000850:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000852:	4b32      	ldr	r3, [pc, #200]	@ (800091c <MX_GPIO_Init+0xe4>)
 8000854:	2102      	movs	r1, #2
 8000856:	430a      	orrs	r2, r1
 8000858:	635a      	str	r2, [r3, #52]	@ 0x34
 800085a:	4b30      	ldr	r3, [pc, #192]	@ (800091c <MX_GPIO_Init+0xe4>)
 800085c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800085e:	2202      	movs	r2, #2
 8000860:	4013      	ands	r3, r2
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b2d      	ldr	r3, [pc, #180]	@ (800091c <MX_GPIO_Init+0xe4>)
 8000868:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800086a:	4b2c      	ldr	r3, [pc, #176]	@ (800091c <MX_GPIO_Init+0xe4>)
 800086c:	2101      	movs	r1, #1
 800086e:	430a      	orrs	r2, r1
 8000870:	635a      	str	r2, [r3, #52]	@ 0x34
 8000872:	4b2a      	ldr	r3, [pc, #168]	@ (800091c <MX_GPIO_Init+0xe4>)
 8000874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000876:	2201      	movs	r2, #1
 8000878:	4013      	ands	r3, r2
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FLASH_CS_Pin|FRAM_CS_Pin, GPIO_PIN_SET);
 800087e:	23a0      	movs	r3, #160	@ 0xa0
 8000880:	05db      	lsls	r3, r3, #23
 8000882:	2201      	movs	r2, #1
 8000884:	2118      	movs	r1, #24
 8000886:	0018      	movs	r0, r3
 8000888:	f000 fcba 	bl	8001200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FRAM_CSB0_Pin|FLASH_CSB1_Pin|S2LP_CS_Pin, GPIO_PIN_RESET);
 800088c:	4b24      	ldr	r3, [pc, #144]	@ (8000920 <MX_GPIO_Init+0xe8>)
 800088e:	2200      	movs	r2, #0
 8000890:	210b      	movs	r1, #11
 8000892:	0018      	movs	r0, r3
 8000894:	f000 fcb4 	bl	8001200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S2LP_SDN_GPIO_Port, S2LP_SDN_Pin, GPIO_PIN_RESET);
 8000898:	2380      	movs	r3, #128	@ 0x80
 800089a:	0219      	lsls	r1, r3, #8
 800089c:	23a0      	movs	r3, #160	@ 0xa0
 800089e:	05db      	lsls	r3, r3, #23
 80008a0:	2200      	movs	r2, #0
 80008a2:	0018      	movs	r0, r3
 80008a4:	f000 fcac 	bl	8001200 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FLASH_CS_Pin FRAM_CS_Pin S2LP_SDN_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin|FRAM_CS_Pin|S2LP_SDN_Pin;
 80008a8:	193b      	adds	r3, r7, r4
 80008aa:	4a1e      	ldr	r2, [pc, #120]	@ (8000924 <MX_GPIO_Init+0xec>)
 80008ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	193b      	adds	r3, r7, r4
 80008b0:	2201      	movs	r2, #1
 80008b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	193b      	adds	r3, r7, r4
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ba:	193b      	adds	r3, r7, r4
 80008bc:	2203      	movs	r2, #3
 80008be:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c0:	193a      	adds	r2, r7, r4
 80008c2:	23a0      	movs	r3, #160	@ 0xa0
 80008c4:	05db      	lsls	r3, r3, #23
 80008c6:	0011      	movs	r1, r2
 80008c8:	0018      	movs	r0, r3
 80008ca:	f000 fb35 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : FRAM_CSB0_Pin FLASH_CSB1_Pin S2LP_CS_Pin */
  GPIO_InitStruct.Pin = FRAM_CSB0_Pin|FLASH_CSB1_Pin|S2LP_CS_Pin;
 80008ce:	193b      	adds	r3, r7, r4
 80008d0:	220b      	movs	r2, #11
 80008d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	193b      	adds	r3, r7, r4
 80008d6:	2201      	movs	r2, #1
 80008d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e0:	193b      	adds	r3, r7, r4
 80008e2:	2203      	movs	r2, #3
 80008e4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e6:	193b      	adds	r3, r7, r4
 80008e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000920 <MX_GPIO_Init+0xe8>)
 80008ea:	0019      	movs	r1, r3
 80008ec:	0010      	movs	r0, r2
 80008ee:	f000 fb23 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : S2LP_GPIO0_Pin S2LP_GPIO1_Pin */
  GPIO_InitStruct.Pin = S2LP_GPIO0_Pin|S2LP_GPIO1_Pin;
 80008f2:	0021      	movs	r1, r4
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	2230      	movs	r2, #48	@ 0x30
 80008f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	2288      	movs	r2, #136	@ 0x88
 80008fe:	0352      	lsls	r2, r2, #13
 8000900:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	187b      	adds	r3, r7, r1
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000908:	187b      	adds	r3, r7, r1
 800090a:	4a05      	ldr	r2, [pc, #20]	@ (8000920 <MX_GPIO_Init+0xe8>)
 800090c:	0019      	movs	r1, r3
 800090e:	0010      	movs	r0, r2
 8000910:	f000 fb12 	bl	8000f38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000914:	46c0      	nop			@ (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	b009      	add	sp, #36	@ 0x24
 800091a:	bd90      	pop	{r4, r7, pc}
 800091c:	40021000 	.word	0x40021000
 8000920:	50000400 	.word	0x50000400
 8000924:	00008018 	.word	0x00008018

08000928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800092c:	b672      	cpsid	i
}
 800092e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000930:	46c0      	nop			@ (mov r8, r8)
 8000932:	e7fd      	b.n	8000930 <Error_Handler+0x8>

08000934 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093a:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <HAL_MspInit+0x44>)
 800093c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800093e:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <HAL_MspInit+0x44>)
 8000940:	2101      	movs	r1, #1
 8000942:	430a      	orrs	r2, r1
 8000944:	641a      	str	r2, [r3, #64]	@ 0x40
 8000946:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <HAL_MspInit+0x44>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094a:	2201      	movs	r2, #1
 800094c:	4013      	ands	r3, r2
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <HAL_MspInit+0x44>)
 8000954:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000956:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <HAL_MspInit+0x44>)
 8000958:	2180      	movs	r1, #128	@ 0x80
 800095a:	0549      	lsls	r1, r1, #21
 800095c:	430a      	orrs	r2, r1
 800095e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000960:	4b05      	ldr	r3, [pc, #20]	@ (8000978 <HAL_MspInit+0x44>)
 8000962:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000964:	2380      	movs	r3, #128	@ 0x80
 8000966:	055b      	lsls	r3, r3, #21
 8000968:	4013      	ands	r3, r2
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096e:	46c0      	nop			@ (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	b002      	add	sp, #8
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			@ (mov r8, r8)
 8000978:	40021000 	.word	0x40021000

0800097c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800097c:	b590      	push	{r4, r7, lr}
 800097e:	b08d      	sub	sp, #52	@ 0x34
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	241c      	movs	r4, #28
 8000986:	193b      	adds	r3, r7, r4
 8000988:	0018      	movs	r0, r3
 800098a:	2314      	movs	r3, #20
 800098c:	001a      	movs	r2, r3
 800098e:	2100      	movs	r1, #0
 8000990:	f003 f8c2 	bl	8003b18 <memset>
  if(hspi->Instance==SPI1)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a42      	ldr	r2, [pc, #264]	@ (8000aa4 <HAL_SPI_MspInit+0x128>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d131      	bne.n	8000a02 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800099e:	4b42      	ldr	r3, [pc, #264]	@ (8000aa8 <HAL_SPI_MspInit+0x12c>)
 80009a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009a2:	4b41      	ldr	r3, [pc, #260]	@ (8000aa8 <HAL_SPI_MspInit+0x12c>)
 80009a4:	2180      	movs	r1, #128	@ 0x80
 80009a6:	0149      	lsls	r1, r1, #5
 80009a8:	430a      	orrs	r2, r1
 80009aa:	641a      	str	r2, [r3, #64]	@ 0x40
 80009ac:	4b3e      	ldr	r3, [pc, #248]	@ (8000aa8 <HAL_SPI_MspInit+0x12c>)
 80009ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009b0:	2380      	movs	r3, #128	@ 0x80
 80009b2:	015b      	lsls	r3, r3, #5
 80009b4:	4013      	ands	r3, r2
 80009b6:	61bb      	str	r3, [r7, #24]
 80009b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	4b3b      	ldr	r3, [pc, #236]	@ (8000aa8 <HAL_SPI_MspInit+0x12c>)
 80009bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009be:	4b3a      	ldr	r3, [pc, #232]	@ (8000aa8 <HAL_SPI_MspInit+0x12c>)
 80009c0:	2101      	movs	r1, #1
 80009c2:	430a      	orrs	r2, r1
 80009c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80009c6:	4b38      	ldr	r3, [pc, #224]	@ (8000aa8 <HAL_SPI_MspInit+0x12c>)
 80009c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009ca:	2201      	movs	r2, #1
 80009cc:	4013      	ands	r3, r2
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80009d2:	0021      	movs	r1, r4
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	22e0      	movs	r2, #224	@ 0xe0
 80009d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2202      	movs	r2, #2
 80009de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2200      	movs	r2, #0
 80009ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f2:	187a      	adds	r2, r7, r1
 80009f4:	23a0      	movs	r3, #160	@ 0xa0
 80009f6:	05db      	lsls	r3, r3, #23
 80009f8:	0011      	movs	r1, r2
 80009fa:	0018      	movs	r0, r3
 80009fc:	f000 fa9c 	bl	8000f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a00:	e04b      	b.n	8000a9a <HAL_SPI_MspInit+0x11e>
  else if(hspi->Instance==SPI2)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a29      	ldr	r2, [pc, #164]	@ (8000aac <HAL_SPI_MspInit+0x130>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d146      	bne.n	8000a9a <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a0c:	4b26      	ldr	r3, [pc, #152]	@ (8000aa8 <HAL_SPI_MspInit+0x12c>)
 8000a0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a10:	4b25      	ldr	r3, [pc, #148]	@ (8000aa8 <HAL_SPI_MspInit+0x12c>)
 8000a12:	2180      	movs	r1, #128	@ 0x80
 8000a14:	01c9      	lsls	r1, r1, #7
 8000a16:	430a      	orrs	r2, r1
 8000a18:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a1a:	4b23      	ldr	r3, [pc, #140]	@ (8000aa8 <HAL_SPI_MspInit+0x12c>)
 8000a1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a1e:	2380      	movs	r3, #128	@ 0x80
 8000a20:	01db      	lsls	r3, r3, #7
 8000a22:	4013      	ands	r3, r2
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a28:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa8 <HAL_SPI_MspInit+0x12c>)
 8000a2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa8 <HAL_SPI_MspInit+0x12c>)
 8000a2e:	2102      	movs	r1, #2
 8000a30:	430a      	orrs	r2, r1
 8000a32:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a34:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa8 <HAL_SPI_MspInit+0x12c>)
 8000a36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a38:	2202      	movs	r2, #2
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a40:	241c      	movs	r4, #28
 8000a42:	193b      	adds	r3, r7, r4
 8000a44:	2240      	movs	r2, #64	@ 0x40
 8000a46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a48:	193b      	adds	r3, r7, r4
 8000a4a:	2202      	movs	r2, #2
 8000a4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	193b      	adds	r3, r7, r4
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	193b      	adds	r3, r7, r4
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 8000a5a:	193b      	adds	r3, r7, r4
 8000a5c:	2204      	movs	r2, #4
 8000a5e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a60:	193b      	adds	r3, r7, r4
 8000a62:	4a13      	ldr	r2, [pc, #76]	@ (8000ab0 <HAL_SPI_MspInit+0x134>)
 8000a64:	0019      	movs	r1, r3
 8000a66:	0010      	movs	r0, r2
 8000a68:	f000 fa66 	bl	8000f38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000a6c:	0021      	movs	r1, r4
 8000a6e:	187b      	adds	r3, r7, r1
 8000a70:	22c0      	movs	r2, #192	@ 0xc0
 8000a72:	0052      	lsls	r2, r2, #1
 8000a74:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	2202      	movs	r2, #2
 8000a7a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	2200      	movs	r2, #0
 8000a86:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	4a07      	ldr	r2, [pc, #28]	@ (8000ab0 <HAL_SPI_MspInit+0x134>)
 8000a92:	0019      	movs	r1, r3
 8000a94:	0010      	movs	r0, r2
 8000a96:	f000 fa4f 	bl	8000f38 <HAL_GPIO_Init>
}
 8000a9a:	46c0      	nop			@ (mov r8, r8)
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b00d      	add	sp, #52	@ 0x34
 8000aa0:	bd90      	pop	{r4, r7, pc}
 8000aa2:	46c0      	nop			@ (mov r8, r8)
 8000aa4:	40013000 	.word	0x40013000
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40003800 	.word	0x40003800
 8000ab0:	50000400 	.word	0x50000400

08000ab4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b093      	sub	sp, #76	@ 0x4c
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000abc:	2410      	movs	r4, #16
 8000abe:	193b      	adds	r3, r7, r4
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	2338      	movs	r3, #56	@ 0x38
 8000ac4:	001a      	movs	r2, r3
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	f003 f826 	bl	8003b18 <memset>
  if(htim_base->Instance==TIM1)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a11      	ldr	r2, [pc, #68]	@ (8000b18 <HAL_TIM_Base_MspInit+0x64>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d11c      	bne.n	8000b10 <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000ad6:	193b      	adds	r3, r7, r4
 8000ad8:	2280      	movs	r2, #128	@ 0x80
 8000ada:	0392      	lsls	r2, r2, #14
 8000adc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000ade:	193b      	adds	r3, r7, r4
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ae4:	193b      	adds	r3, r7, r4
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f001 f8b8 	bl	8001c5c <HAL_RCCEx_PeriphCLKConfig>
 8000aec:	1e03      	subs	r3, r0, #0
 8000aee:	d001      	beq.n	8000af4 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8000af0:	f7ff ff1a 	bl	8000928 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000af4:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <HAL_TIM_Base_MspInit+0x68>)
 8000af6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000af8:	4b08      	ldr	r3, [pc, #32]	@ (8000b1c <HAL_TIM_Base_MspInit+0x68>)
 8000afa:	2180      	movs	r1, #128	@ 0x80
 8000afc:	0109      	lsls	r1, r1, #4
 8000afe:	430a      	orrs	r2, r1
 8000b00:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b02:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <HAL_TIM_Base_MspInit+0x68>)
 8000b04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b06:	2380      	movs	r3, #128	@ 0x80
 8000b08:	011b      	lsls	r3, r3, #4
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000b10:	46c0      	nop			@ (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	b013      	add	sp, #76	@ 0x4c
 8000b16:	bd90      	pop	{r4, r7, pc}
 8000b18:	40012c00 	.word	0x40012c00
 8000b1c:	40021000 	.word	0x40021000

08000b20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b089      	sub	sp, #36	@ 0x24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	240c      	movs	r4, #12
 8000b2a:	193b      	adds	r3, r7, r4
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	2314      	movs	r3, #20
 8000b30:	001a      	movs	r2, r3
 8000b32:	2100      	movs	r1, #0
 8000b34:	f002 fff0 	bl	8003b18 <memset>
  if(htim->Instance==TIM1)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a15      	ldr	r2, [pc, #84]	@ (8000b94 <HAL_TIM_MspPostInit+0x74>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d123      	bne.n	8000b8a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <HAL_TIM_MspPostInit+0x78>)
 8000b44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b46:	4b14      	ldr	r3, [pc, #80]	@ (8000b98 <HAL_TIM_MspPostInit+0x78>)
 8000b48:	2101      	movs	r1, #1
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b4e:	4b12      	ldr	r3, [pc, #72]	@ (8000b98 <HAL_TIM_MspPostInit+0x78>)
 8000b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b52:	2201      	movs	r2, #1
 8000b54:	4013      	ands	r3, r2
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b5a:	193b      	adds	r3, r7, r4
 8000b5c:	22c0      	movs	r2, #192	@ 0xc0
 8000b5e:	0092      	lsls	r2, r2, #2
 8000b60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	0021      	movs	r1, r4
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	2202      	movs	r2, #2
 8000b68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	187b      	adds	r3, r7, r1
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000b76:	187b      	adds	r3, r7, r1
 8000b78:	2202      	movs	r2, #2
 8000b7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7c:	187a      	adds	r2, r7, r1
 8000b7e:	23a0      	movs	r3, #160	@ 0xa0
 8000b80:	05db      	lsls	r3, r3, #23
 8000b82:	0011      	movs	r1, r2
 8000b84:	0018      	movs	r0, r3
 8000b86:	f000 f9d7 	bl	8000f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b8a:	46c0      	nop			@ (mov r8, r8)
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	b009      	add	sp, #36	@ 0x24
 8000b90:	bd90      	pop	{r4, r7, pc}
 8000b92:	46c0      	nop			@ (mov r8, r8)
 8000b94:	40012c00 	.word	0x40012c00
 8000b98:	40021000 	.word	0x40021000

08000b9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b08b      	sub	sp, #44	@ 0x2c
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	2414      	movs	r4, #20
 8000ba6:	193b      	adds	r3, r7, r4
 8000ba8:	0018      	movs	r0, r3
 8000baa:	2314      	movs	r3, #20
 8000bac:	001a      	movs	r2, r3
 8000bae:	2100      	movs	r1, #0
 8000bb0:	f002 ffb2 	bl	8003b18 <memset>
  if(huart->Instance==USART3)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a1b      	ldr	r2, [pc, #108]	@ (8000c28 <HAL_UART_MspInit+0x8c>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d130      	bne.n	8000c20 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8000c2c <HAL_UART_MspInit+0x90>)
 8000bc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c2c <HAL_UART_MspInit+0x90>)
 8000bc4:	2180      	movs	r1, #128	@ 0x80
 8000bc6:	02c9      	lsls	r1, r1, #11
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000bcc:	4b17      	ldr	r3, [pc, #92]	@ (8000c2c <HAL_UART_MspInit+0x90>)
 8000bce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bd0:	2380      	movs	r3, #128	@ 0x80
 8000bd2:	02db      	lsls	r3, r3, #11
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bda:	4b14      	ldr	r3, [pc, #80]	@ (8000c2c <HAL_UART_MspInit+0x90>)
 8000bdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bde:	4b13      	ldr	r3, [pc, #76]	@ (8000c2c <HAL_UART_MspInit+0x90>)
 8000be0:	2102      	movs	r1, #2
 8000be2:	430a      	orrs	r2, r1
 8000be4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000be6:	4b11      	ldr	r3, [pc, #68]	@ (8000c2c <HAL_UART_MspInit+0x90>)
 8000be8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bea:	2202      	movs	r2, #2
 8000bec:	4013      	ands	r3, r2
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB9     ------> USART3_RX
    PB2     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_2;
 8000bf2:	193b      	adds	r3, r7, r4
 8000bf4:	2281      	movs	r2, #129	@ 0x81
 8000bf6:	0092      	lsls	r2, r2, #2
 8000bf8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	0021      	movs	r1, r4
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	2202      	movs	r2, #2
 8000c00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	187b      	adds	r3, r7, r1
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000c0e:	187b      	adds	r3, r7, r1
 8000c10:	2204      	movs	r2, #4
 8000c12:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	4a06      	ldr	r2, [pc, #24]	@ (8000c30 <HAL_UART_MspInit+0x94>)
 8000c18:	0019      	movs	r1, r3
 8000c1a:	0010      	movs	r0, r2
 8000c1c:	f000 f98c 	bl	8000f38 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000c20:	46c0      	nop			@ (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	b00b      	add	sp, #44	@ 0x2c
 8000c26:	bd90      	pop	{r4, r7, pc}
 8000c28:	40004800 	.word	0x40004800
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	50000400 	.word	0x50000400

08000c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c38:	46c0      	nop			@ (mov r8, r8)
 8000c3a:	e7fd      	b.n	8000c38 <NMI_Handler+0x4>

08000c3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c40:	46c0      	nop			@ (mov r8, r8)
 8000c42:	e7fd      	b.n	8000c40 <HardFault_Handler+0x4>

08000c44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c48:	46c0      	nop			@ (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c52:	46c0      	nop			@ (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c5c:	f000 f89c 	bl	8000d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c60:	46c0      	nop			@ (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <Reset_Handler>:
 8000c70:	480d      	ldr	r0, [pc, #52]	@ (8000ca8 <LoopForever+0x2>)
 8000c72:	4685      	mov	sp, r0
 8000c74:	f7ff fff7 	bl	8000c66 <SystemInit>
 8000c78:	480c      	ldr	r0, [pc, #48]	@ (8000cac <LoopForever+0x6>)
 8000c7a:	490d      	ldr	r1, [pc, #52]	@ (8000cb0 <LoopForever+0xa>)
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb4 <LoopForever+0xe>)
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e002      	b.n	8000c88 <LoopCopyDataInit>

08000c82 <CopyDataInit>:
 8000c82:	58d4      	ldr	r4, [r2, r3]
 8000c84:	50c4      	str	r4, [r0, r3]
 8000c86:	3304      	adds	r3, #4

08000c88 <LoopCopyDataInit>:
 8000c88:	18c4      	adds	r4, r0, r3
 8000c8a:	428c      	cmp	r4, r1
 8000c8c:	d3f9      	bcc.n	8000c82 <CopyDataInit>
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb8 <LoopForever+0x12>)
 8000c90:	4c0a      	ldr	r4, [pc, #40]	@ (8000cbc <LoopForever+0x16>)
 8000c92:	2300      	movs	r3, #0
 8000c94:	e001      	b.n	8000c9a <LoopFillZerobss>

08000c96 <FillZerobss>:
 8000c96:	6013      	str	r3, [r2, #0]
 8000c98:	3204      	adds	r2, #4

08000c9a <LoopFillZerobss>:
 8000c9a:	42a2      	cmp	r2, r4
 8000c9c:	d3fb      	bcc.n	8000c96 <FillZerobss>
 8000c9e:	f002 ff43 	bl	8003b28 <__libc_init_array>
 8000ca2:	f7ff fbd3 	bl	800044c <main>

08000ca6 <LoopForever>:
 8000ca6:	e7fe      	b.n	8000ca6 <LoopForever>
 8000ca8:	20009000 	.word	0x20009000
 8000cac:	20000000 	.word	0x20000000
 8000cb0:	2000000c 	.word	0x2000000c
 8000cb4:	08003c64 	.word	0x08003c64
 8000cb8:	2000000c 	.word	0x2000000c
 8000cbc:	200001d4 	.word	0x200001d4

08000cc0 <ADC1_COMP_IRQHandler>:
 8000cc0:	e7fe      	b.n	8000cc0 <ADC1_COMP_IRQHandler>
	...

08000cc4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cca:	1dfb      	adds	r3, r7, #7
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000d00 <HAL_Init+0x3c>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8000d00 <HAL_Init+0x3c>)
 8000cd6:	2180      	movs	r1, #128	@ 0x80
 8000cd8:	0049      	lsls	r1, r1, #1
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cde:	2003      	movs	r0, #3
 8000ce0:	f000 f810 	bl	8000d04 <HAL_InitTick>
 8000ce4:	1e03      	subs	r3, r0, #0
 8000ce6:	d003      	beq.n	8000cf0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000ce8:	1dfb      	adds	r3, r7, #7
 8000cea:	2201      	movs	r2, #1
 8000cec:	701a      	strb	r2, [r3, #0]
 8000cee:	e001      	b.n	8000cf4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000cf0:	f7ff fe20 	bl	8000934 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cf4:	1dfb      	adds	r3, r7, #7
 8000cf6:	781b      	ldrb	r3, [r3, #0]
}
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	b002      	add	sp, #8
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40022000 	.word	0x40022000

08000d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d04:	b590      	push	{r4, r7, lr}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d0c:	230f      	movs	r3, #15
 8000d0e:	18fb      	adds	r3, r7, r3
 8000d10:	2200      	movs	r2, #0
 8000d12:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d14:	4b1d      	ldr	r3, [pc, #116]	@ (8000d8c <HAL_InitTick+0x88>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d02b      	beq.n	8000d74 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000d90 <HAL_InitTick+0x8c>)
 8000d1e:	681c      	ldr	r4, [r3, #0]
 8000d20:	4b1a      	ldr	r3, [pc, #104]	@ (8000d8c <HAL_InitTick+0x88>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	0019      	movs	r1, r3
 8000d26:	23fa      	movs	r3, #250	@ 0xfa
 8000d28:	0098      	lsls	r0, r3, #2
 8000d2a:	f7ff f9ed 	bl	8000108 <__udivsi3>
 8000d2e:	0003      	movs	r3, r0
 8000d30:	0019      	movs	r1, r3
 8000d32:	0020      	movs	r0, r4
 8000d34:	f7ff f9e8 	bl	8000108 <__udivsi3>
 8000d38:	0003      	movs	r3, r0
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f000 f8ef 	bl	8000f1e <HAL_SYSTICK_Config>
 8000d40:	1e03      	subs	r3, r0, #0
 8000d42:	d112      	bne.n	8000d6a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2b03      	cmp	r3, #3
 8000d48:	d80a      	bhi.n	8000d60 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	425b      	negs	r3, r3
 8000d50:	2200      	movs	r2, #0
 8000d52:	0018      	movs	r0, r3
 8000d54:	f000 f8ce 	bl	8000ef4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d58:	4b0e      	ldr	r3, [pc, #56]	@ (8000d94 <HAL_InitTick+0x90>)
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	e00d      	b.n	8000d7c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d60:	230f      	movs	r3, #15
 8000d62:	18fb      	adds	r3, r7, r3
 8000d64:	2201      	movs	r2, #1
 8000d66:	701a      	strb	r2, [r3, #0]
 8000d68:	e008      	b.n	8000d7c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d6a:	230f      	movs	r3, #15
 8000d6c:	18fb      	adds	r3, r7, r3
 8000d6e:	2201      	movs	r2, #1
 8000d70:	701a      	strb	r2, [r3, #0]
 8000d72:	e003      	b.n	8000d7c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d74:	230f      	movs	r3, #15
 8000d76:	18fb      	adds	r3, r7, r3
 8000d78:	2201      	movs	r2, #1
 8000d7a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d7c:	230f      	movs	r3, #15
 8000d7e:	18fb      	adds	r3, r7, r3
 8000d80:	781b      	ldrb	r3, [r3, #0]
}
 8000d82:	0018      	movs	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b005      	add	sp, #20
 8000d88:	bd90      	pop	{r4, r7, pc}
 8000d8a:	46c0      	nop			@ (mov r8, r8)
 8000d8c:	20000008 	.word	0x20000008
 8000d90:	20000000 	.word	0x20000000
 8000d94:	20000004 	.word	0x20000004

08000d98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d9c:	4b05      	ldr	r3, [pc, #20]	@ (8000db4 <HAL_IncTick+0x1c>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	001a      	movs	r2, r3
 8000da2:	4b05      	ldr	r3, [pc, #20]	@ (8000db8 <HAL_IncTick+0x20>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	18d2      	adds	r2, r2, r3
 8000da8:	4b03      	ldr	r3, [pc, #12]	@ (8000db8 <HAL_IncTick+0x20>)
 8000daa:	601a      	str	r2, [r3, #0]
}
 8000dac:	46c0      	nop			@ (mov r8, r8)
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	46c0      	nop			@ (mov r8, r8)
 8000db4:	20000008 	.word	0x20000008
 8000db8:	200001d0 	.word	0x200001d0

08000dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc0:	4b02      	ldr	r3, [pc, #8]	@ (8000dcc <HAL_GetTick+0x10>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
}
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	46c0      	nop			@ (mov r8, r8)
 8000dcc:	200001d0 	.word	0x200001d0

08000dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	0002      	movs	r2, r0
 8000dd8:	6039      	str	r1, [r7, #0]
 8000dda:	1dfb      	adds	r3, r7, #7
 8000ddc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dde:	1dfb      	adds	r3, r7, #7
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000de4:	d828      	bhi.n	8000e38 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000de6:	4a2f      	ldr	r2, [pc, #188]	@ (8000ea4 <__NVIC_SetPriority+0xd4>)
 8000de8:	1dfb      	adds	r3, r7, #7
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	b25b      	sxtb	r3, r3
 8000dee:	089b      	lsrs	r3, r3, #2
 8000df0:	33c0      	adds	r3, #192	@ 0xc0
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	589b      	ldr	r3, [r3, r2]
 8000df6:	1dfa      	adds	r2, r7, #7
 8000df8:	7812      	ldrb	r2, [r2, #0]
 8000dfa:	0011      	movs	r1, r2
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	400a      	ands	r2, r1
 8000e00:	00d2      	lsls	r2, r2, #3
 8000e02:	21ff      	movs	r1, #255	@ 0xff
 8000e04:	4091      	lsls	r1, r2
 8000e06:	000a      	movs	r2, r1
 8000e08:	43d2      	mvns	r2, r2
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	019b      	lsls	r3, r3, #6
 8000e12:	22ff      	movs	r2, #255	@ 0xff
 8000e14:	401a      	ands	r2, r3
 8000e16:	1dfb      	adds	r3, r7, #7
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	4003      	ands	r3, r0
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e24:	481f      	ldr	r0, [pc, #124]	@ (8000ea4 <__NVIC_SetPriority+0xd4>)
 8000e26:	1dfb      	adds	r3, r7, #7
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	b25b      	sxtb	r3, r3
 8000e2c:	089b      	lsrs	r3, r3, #2
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	33c0      	adds	r3, #192	@ 0xc0
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e36:	e031      	b.n	8000e9c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e38:	4a1b      	ldr	r2, [pc, #108]	@ (8000ea8 <__NVIC_SetPriority+0xd8>)
 8000e3a:	1dfb      	adds	r3, r7, #7
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	0019      	movs	r1, r3
 8000e40:	230f      	movs	r3, #15
 8000e42:	400b      	ands	r3, r1
 8000e44:	3b08      	subs	r3, #8
 8000e46:	089b      	lsrs	r3, r3, #2
 8000e48:	3306      	adds	r3, #6
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	18d3      	adds	r3, r2, r3
 8000e4e:	3304      	adds	r3, #4
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	1dfa      	adds	r2, r7, #7
 8000e54:	7812      	ldrb	r2, [r2, #0]
 8000e56:	0011      	movs	r1, r2
 8000e58:	2203      	movs	r2, #3
 8000e5a:	400a      	ands	r2, r1
 8000e5c:	00d2      	lsls	r2, r2, #3
 8000e5e:	21ff      	movs	r1, #255	@ 0xff
 8000e60:	4091      	lsls	r1, r2
 8000e62:	000a      	movs	r2, r1
 8000e64:	43d2      	mvns	r2, r2
 8000e66:	401a      	ands	r2, r3
 8000e68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	019b      	lsls	r3, r3, #6
 8000e6e:	22ff      	movs	r2, #255	@ 0xff
 8000e70:	401a      	ands	r2, r3
 8000e72:	1dfb      	adds	r3, r7, #7
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	0018      	movs	r0, r3
 8000e78:	2303      	movs	r3, #3
 8000e7a:	4003      	ands	r3, r0
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e80:	4809      	ldr	r0, [pc, #36]	@ (8000ea8 <__NVIC_SetPriority+0xd8>)
 8000e82:	1dfb      	adds	r3, r7, #7
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	001c      	movs	r4, r3
 8000e88:	230f      	movs	r3, #15
 8000e8a:	4023      	ands	r3, r4
 8000e8c:	3b08      	subs	r3, #8
 8000e8e:	089b      	lsrs	r3, r3, #2
 8000e90:	430a      	orrs	r2, r1
 8000e92:	3306      	adds	r3, #6
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	18c3      	adds	r3, r0, r3
 8000e98:	3304      	adds	r3, #4
 8000e9a:	601a      	str	r2, [r3, #0]
}
 8000e9c:	46c0      	nop			@ (mov r8, r8)
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	b003      	add	sp, #12
 8000ea2:	bd90      	pop	{r4, r7, pc}
 8000ea4:	e000e100 	.word	0xe000e100
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	1e5a      	subs	r2, r3, #1
 8000eb8:	2380      	movs	r3, #128	@ 0x80
 8000eba:	045b      	lsls	r3, r3, #17
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d301      	bcc.n	8000ec4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e010      	b.n	8000ee6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef0 <SysTick_Config+0x44>)
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	3a01      	subs	r2, #1
 8000eca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ecc:	2301      	movs	r3, #1
 8000ece:	425b      	negs	r3, r3
 8000ed0:	2103      	movs	r1, #3
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f7ff ff7c 	bl	8000dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed8:	4b05      	ldr	r3, [pc, #20]	@ (8000ef0 <SysTick_Config+0x44>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ede:	4b04      	ldr	r3, [pc, #16]	@ (8000ef0 <SysTick_Config+0x44>)
 8000ee0:	2207      	movs	r2, #7
 8000ee2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	b002      	add	sp, #8
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	46c0      	nop			@ (mov r8, r8)
 8000ef0:	e000e010 	.word	0xe000e010

08000ef4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
 8000efe:	210f      	movs	r1, #15
 8000f00:	187b      	adds	r3, r7, r1
 8000f02:	1c02      	adds	r2, r0, #0
 8000f04:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	187b      	adds	r3, r7, r1
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	b25b      	sxtb	r3, r3
 8000f0e:	0011      	movs	r1, r2
 8000f10:	0018      	movs	r0, r3
 8000f12:	f7ff ff5d 	bl	8000dd0 <__NVIC_SetPriority>
}
 8000f16:	46c0      	nop			@ (mov r8, r8)
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b004      	add	sp, #16
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f7ff ffbf 	bl	8000eac <SysTick_Config>
 8000f2e:	0003      	movs	r3, r0
}
 8000f30:	0018      	movs	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	b002      	add	sp, #8
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f46:	e147      	b.n	80011d8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	697a      	ldr	r2, [r7, #20]
 8000f50:	4091      	lsls	r1, r2
 8000f52:	000a      	movs	r2, r1
 8000f54:	4013      	ands	r3, r2
 8000f56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d100      	bne.n	8000f60 <HAL_GPIO_Init+0x28>
 8000f5e:	e138      	b.n	80011d2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	2203      	movs	r2, #3
 8000f66:	4013      	ands	r3, r2
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d005      	beq.n	8000f78 <HAL_GPIO_Init+0x40>
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2203      	movs	r2, #3
 8000f72:	4013      	ands	r3, r2
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d130      	bne.n	8000fda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	2203      	movs	r2, #3
 8000f84:	409a      	lsls	r2, r3
 8000f86:	0013      	movs	r3, r2
 8000f88:	43da      	mvns	r2, r3
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	68da      	ldr	r2, [r3, #12]
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	409a      	lsls	r2, r3
 8000f9a:	0013      	movs	r3, r2
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fae:	2201      	movs	r2, #1
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	409a      	lsls	r2, r3
 8000fb4:	0013      	movs	r3, r2
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	091b      	lsrs	r3, r3, #4
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	409a      	lsls	r2, r3
 8000fcc:	0013      	movs	r3, r2
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2203      	movs	r2, #3
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	2b03      	cmp	r3, #3
 8000fe4:	d017      	beq.n	8001016 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	409a      	lsls	r2, r3
 8000ff4:	0013      	movs	r3, r2
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	689a      	ldr	r2, [r3, #8]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	409a      	lsls	r2, r3
 8001008:	0013      	movs	r3, r2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	2203      	movs	r2, #3
 800101c:	4013      	ands	r3, r2
 800101e:	2b02      	cmp	r3, #2
 8001020:	d123      	bne.n	800106a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	08da      	lsrs	r2, r3, #3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3208      	adds	r2, #8
 800102a:	0092      	lsls	r2, r2, #2
 800102c:	58d3      	ldr	r3, [r2, r3]
 800102e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	2207      	movs	r2, #7
 8001034:	4013      	ands	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	220f      	movs	r2, #15
 800103a:	409a      	lsls	r2, r3
 800103c:	0013      	movs	r3, r2
 800103e:	43da      	mvns	r2, r3
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	691a      	ldr	r2, [r3, #16]
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	2107      	movs	r1, #7
 800104e:	400b      	ands	r3, r1
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	409a      	lsls	r2, r3
 8001054:	0013      	movs	r3, r2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	08da      	lsrs	r2, r3, #3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3208      	adds	r2, #8
 8001064:	0092      	lsls	r2, r2, #2
 8001066:	6939      	ldr	r1, [r7, #16]
 8001068:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	2203      	movs	r2, #3
 8001076:	409a      	lsls	r2, r3
 8001078:	0013      	movs	r3, r2
 800107a:	43da      	mvns	r2, r3
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2203      	movs	r2, #3
 8001088:	401a      	ands	r2, r3
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	409a      	lsls	r2, r3
 8001090:	0013      	movs	r3, r2
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	23c0      	movs	r3, #192	@ 0xc0
 80010a4:	029b      	lsls	r3, r3, #10
 80010a6:	4013      	ands	r3, r2
 80010a8:	d100      	bne.n	80010ac <HAL_GPIO_Init+0x174>
 80010aa:	e092      	b.n	80011d2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80010ac:	4a50      	ldr	r2, [pc, #320]	@ (80011f0 <HAL_GPIO_Init+0x2b8>)
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	089b      	lsrs	r3, r3, #2
 80010b2:	3318      	adds	r3, #24
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	589b      	ldr	r3, [r3, r2]
 80010b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	2203      	movs	r2, #3
 80010be:	4013      	ands	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	220f      	movs	r2, #15
 80010c4:	409a      	lsls	r2, r3
 80010c6:	0013      	movs	r3, r2
 80010c8:	43da      	mvns	r2, r3
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	23a0      	movs	r3, #160	@ 0xa0
 80010d4:	05db      	lsls	r3, r3, #23
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d013      	beq.n	8001102 <HAL_GPIO_Init+0x1ca>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a45      	ldr	r2, [pc, #276]	@ (80011f4 <HAL_GPIO_Init+0x2bc>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d00d      	beq.n	80010fe <HAL_GPIO_Init+0x1c6>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a44      	ldr	r2, [pc, #272]	@ (80011f8 <HAL_GPIO_Init+0x2c0>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d007      	beq.n	80010fa <HAL_GPIO_Init+0x1c2>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a43      	ldr	r2, [pc, #268]	@ (80011fc <HAL_GPIO_Init+0x2c4>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d101      	bne.n	80010f6 <HAL_GPIO_Init+0x1be>
 80010f2:	2303      	movs	r3, #3
 80010f4:	e006      	b.n	8001104 <HAL_GPIO_Init+0x1cc>
 80010f6:	2305      	movs	r3, #5
 80010f8:	e004      	b.n	8001104 <HAL_GPIO_Init+0x1cc>
 80010fa:	2302      	movs	r3, #2
 80010fc:	e002      	b.n	8001104 <HAL_GPIO_Init+0x1cc>
 80010fe:	2301      	movs	r3, #1
 8001100:	e000      	b.n	8001104 <HAL_GPIO_Init+0x1cc>
 8001102:	2300      	movs	r3, #0
 8001104:	697a      	ldr	r2, [r7, #20]
 8001106:	2103      	movs	r1, #3
 8001108:	400a      	ands	r2, r1
 800110a:	00d2      	lsls	r2, r2, #3
 800110c:	4093      	lsls	r3, r2
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001114:	4936      	ldr	r1, [pc, #216]	@ (80011f0 <HAL_GPIO_Init+0x2b8>)
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	089b      	lsrs	r3, r3, #2
 800111a:	3318      	adds	r3, #24
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001122:	4b33      	ldr	r3, [pc, #204]	@ (80011f0 <HAL_GPIO_Init+0x2b8>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	43da      	mvns	r2, r3
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685a      	ldr	r2, [r3, #4]
 8001136:	2380      	movs	r3, #128	@ 0x80
 8001138:	035b      	lsls	r3, r3, #13
 800113a:	4013      	ands	r3, r2
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4313      	orrs	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001146:	4b2a      	ldr	r3, [pc, #168]	@ (80011f0 <HAL_GPIO_Init+0x2b8>)
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800114c:	4b28      	ldr	r3, [pc, #160]	@ (80011f0 <HAL_GPIO_Init+0x2b8>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	43da      	mvns	r2, r3
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	2380      	movs	r3, #128	@ 0x80
 8001162:	039b      	lsls	r3, r3, #14
 8001164:	4013      	ands	r3, r2
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001170:	4b1f      	ldr	r3, [pc, #124]	@ (80011f0 <HAL_GPIO_Init+0x2b8>)
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001176:	4a1e      	ldr	r2, [pc, #120]	@ (80011f0 <HAL_GPIO_Init+0x2b8>)
 8001178:	2384      	movs	r3, #132	@ 0x84
 800117a:	58d3      	ldr	r3, [r2, r3]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	43da      	mvns	r2, r3
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	2380      	movs	r3, #128	@ 0x80
 800118e:	029b      	lsls	r3, r3, #10
 8001190:	4013      	ands	r3, r2
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800119c:	4914      	ldr	r1, [pc, #80]	@ (80011f0 <HAL_GPIO_Init+0x2b8>)
 800119e:	2284      	movs	r2, #132	@ 0x84
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80011a4:	4a12      	ldr	r2, [pc, #72]	@ (80011f0 <HAL_GPIO_Init+0x2b8>)
 80011a6:	2380      	movs	r3, #128	@ 0x80
 80011a8:	58d3      	ldr	r3, [r2, r3]
 80011aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	43da      	mvns	r2, r3
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	4013      	ands	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	2380      	movs	r3, #128	@ 0x80
 80011bc:	025b      	lsls	r3, r3, #9
 80011be:	4013      	ands	r3, r2
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011ca:	4909      	ldr	r1, [pc, #36]	@ (80011f0 <HAL_GPIO_Init+0x2b8>)
 80011cc:	2280      	movs	r2, #128	@ 0x80
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	3301      	adds	r3, #1
 80011d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	40da      	lsrs	r2, r3
 80011e0:	1e13      	subs	r3, r2, #0
 80011e2:	d000      	beq.n	80011e6 <HAL_GPIO_Init+0x2ae>
 80011e4:	e6b0      	b.n	8000f48 <HAL_GPIO_Init+0x10>
  }
}
 80011e6:	46c0      	nop			@ (mov r8, r8)
 80011e8:	46c0      	nop			@ (mov r8, r8)
 80011ea:	46bd      	mov	sp, r7
 80011ec:	b006      	add	sp, #24
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40021800 	.word	0x40021800
 80011f4:	50000400 	.word	0x50000400
 80011f8:	50000800 	.word	0x50000800
 80011fc:	50000c00 	.word	0x50000c00

08001200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	0008      	movs	r0, r1
 800120a:	0011      	movs	r1, r2
 800120c:	1cbb      	adds	r3, r7, #2
 800120e:	1c02      	adds	r2, r0, #0
 8001210:	801a      	strh	r2, [r3, #0]
 8001212:	1c7b      	adds	r3, r7, #1
 8001214:	1c0a      	adds	r2, r1, #0
 8001216:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001218:	1c7b      	adds	r3, r7, #1
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d004      	beq.n	800122a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001220:	1cbb      	adds	r3, r7, #2
 8001222:	881a      	ldrh	r2, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001228:	e003      	b.n	8001232 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800122a:	1cbb      	adds	r3, r7, #2
 800122c:	881a      	ldrh	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001232:	46c0      	nop			@ (mov r8, r8)
 8001234:	46bd      	mov	sp, r7
 8001236:	b002      	add	sp, #8
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001244:	4b19      	ldr	r3, [pc, #100]	@ (80012ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a19      	ldr	r2, [pc, #100]	@ (80012b0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800124a:	4013      	ands	r3, r2
 800124c:	0019      	movs	r1, r3
 800124e:	4b17      	ldr	r3, [pc, #92]	@ (80012ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	430a      	orrs	r2, r1
 8001254:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	2380      	movs	r3, #128	@ 0x80
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	429a      	cmp	r2, r3
 800125e:	d11f      	bne.n	80012a0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001260:	4b14      	ldr	r3, [pc, #80]	@ (80012b4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	0013      	movs	r3, r2
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	189b      	adds	r3, r3, r2
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4912      	ldr	r1, [pc, #72]	@ (80012b8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800126e:	0018      	movs	r0, r3
 8001270:	f7fe ff4a 	bl	8000108 <__udivsi3>
 8001274:	0003      	movs	r3, r0
 8001276:	3301      	adds	r3, #1
 8001278:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800127a:	e008      	b.n	800128e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	3b01      	subs	r3, #1
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	e001      	b.n	800128e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e009      	b.n	80012a2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800128e:	4b07      	ldr	r3, [pc, #28]	@ (80012ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001290:	695a      	ldr	r2, [r3, #20]
 8001292:	2380      	movs	r3, #128	@ 0x80
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	401a      	ands	r2, r3
 8001298:	2380      	movs	r3, #128	@ 0x80
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	429a      	cmp	r2, r3
 800129e:	d0ed      	beq.n	800127c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	0018      	movs	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	b004      	add	sp, #16
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	46c0      	nop			@ (mov r8, r8)
 80012ac:	40007000 	.word	0x40007000
 80012b0:	fffff9ff 	.word	0xfffff9ff
 80012b4:	20000000 	.word	0x20000000
 80012b8:	000f4240 	.word	0x000f4240

080012bc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80012c0:	4b03      	ldr	r3, [pc, #12]	@ (80012d0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	23e0      	movs	r3, #224	@ 0xe0
 80012c6:	01db      	lsls	r3, r3, #7
 80012c8:	4013      	ands	r3, r2
}
 80012ca:	0018      	movs	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40021000 	.word	0x40021000

080012d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e2fe      	b.n	80018e4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2201      	movs	r2, #1
 80012ec:	4013      	ands	r3, r2
 80012ee:	d100      	bne.n	80012f2 <HAL_RCC_OscConfig+0x1e>
 80012f0:	e07c      	b.n	80013ec <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012f2:	4bc3      	ldr	r3, [pc, #780]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	2238      	movs	r2, #56	@ 0x38
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012fc:	4bc0      	ldr	r3, [pc, #768]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	2203      	movs	r2, #3
 8001302:	4013      	ands	r3, r2
 8001304:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	2b10      	cmp	r3, #16
 800130a:	d102      	bne.n	8001312 <HAL_RCC_OscConfig+0x3e>
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	2b03      	cmp	r3, #3
 8001310:	d002      	beq.n	8001318 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	2b08      	cmp	r3, #8
 8001316:	d10b      	bne.n	8001330 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001318:	4bb9      	ldr	r3, [pc, #740]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	2380      	movs	r3, #128	@ 0x80
 800131e:	029b      	lsls	r3, r3, #10
 8001320:	4013      	ands	r3, r2
 8001322:	d062      	beq.n	80013ea <HAL_RCC_OscConfig+0x116>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d15e      	bne.n	80013ea <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e2d9      	b.n	80018e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	2380      	movs	r3, #128	@ 0x80
 8001336:	025b      	lsls	r3, r3, #9
 8001338:	429a      	cmp	r2, r3
 800133a:	d107      	bne.n	800134c <HAL_RCC_OscConfig+0x78>
 800133c:	4bb0      	ldr	r3, [pc, #704]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4baf      	ldr	r3, [pc, #700]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 8001342:	2180      	movs	r1, #128	@ 0x80
 8001344:	0249      	lsls	r1, r1, #9
 8001346:	430a      	orrs	r2, r1
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	e020      	b.n	800138e <HAL_RCC_OscConfig+0xba>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	23a0      	movs	r3, #160	@ 0xa0
 8001352:	02db      	lsls	r3, r3, #11
 8001354:	429a      	cmp	r2, r3
 8001356:	d10e      	bne.n	8001376 <HAL_RCC_OscConfig+0xa2>
 8001358:	4ba9      	ldr	r3, [pc, #676]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4ba8      	ldr	r3, [pc, #672]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 800135e:	2180      	movs	r1, #128	@ 0x80
 8001360:	02c9      	lsls	r1, r1, #11
 8001362:	430a      	orrs	r2, r1
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	4ba6      	ldr	r3, [pc, #664]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	4ba5      	ldr	r3, [pc, #660]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 800136c:	2180      	movs	r1, #128	@ 0x80
 800136e:	0249      	lsls	r1, r1, #9
 8001370:	430a      	orrs	r2, r1
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	e00b      	b.n	800138e <HAL_RCC_OscConfig+0xba>
 8001376:	4ba2      	ldr	r3, [pc, #648]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	4ba1      	ldr	r3, [pc, #644]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 800137c:	49a1      	ldr	r1, [pc, #644]	@ (8001604 <HAL_RCC_OscConfig+0x330>)
 800137e:	400a      	ands	r2, r1
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	4b9f      	ldr	r3, [pc, #636]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	4b9e      	ldr	r3, [pc, #632]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 8001388:	499f      	ldr	r1, [pc, #636]	@ (8001608 <HAL_RCC_OscConfig+0x334>)
 800138a:	400a      	ands	r2, r1
 800138c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d014      	beq.n	80013c0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001396:	f7ff fd11 	bl	8000dbc <HAL_GetTick>
 800139a:	0003      	movs	r3, r0
 800139c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a0:	f7ff fd0c 	bl	8000dbc <HAL_GetTick>
 80013a4:	0002      	movs	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b64      	cmp	r3, #100	@ 0x64
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e298      	b.n	80018e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013b2:	4b93      	ldr	r3, [pc, #588]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	2380      	movs	r3, #128	@ 0x80
 80013b8:	029b      	lsls	r3, r3, #10
 80013ba:	4013      	ands	r3, r2
 80013bc:	d0f0      	beq.n	80013a0 <HAL_RCC_OscConfig+0xcc>
 80013be:	e015      	b.n	80013ec <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c0:	f7ff fcfc 	bl	8000dbc <HAL_GetTick>
 80013c4:	0003      	movs	r3, r0
 80013c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013ca:	f7ff fcf7 	bl	8000dbc <HAL_GetTick>
 80013ce:	0002      	movs	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b64      	cmp	r3, #100	@ 0x64
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e283      	b.n	80018e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013dc:	4b88      	ldr	r3, [pc, #544]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	2380      	movs	r3, #128	@ 0x80
 80013e2:	029b      	lsls	r3, r3, #10
 80013e4:	4013      	ands	r3, r2
 80013e6:	d1f0      	bne.n	80013ca <HAL_RCC_OscConfig+0xf6>
 80013e8:	e000      	b.n	80013ec <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ea:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2202      	movs	r2, #2
 80013f2:	4013      	ands	r3, r2
 80013f4:	d100      	bne.n	80013f8 <HAL_RCC_OscConfig+0x124>
 80013f6:	e099      	b.n	800152c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013f8:	4b81      	ldr	r3, [pc, #516]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	2238      	movs	r2, #56	@ 0x38
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001402:	4b7f      	ldr	r3, [pc, #508]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	2203      	movs	r2, #3
 8001408:	4013      	ands	r3, r2
 800140a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	2b10      	cmp	r3, #16
 8001410:	d102      	bne.n	8001418 <HAL_RCC_OscConfig+0x144>
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	2b02      	cmp	r3, #2
 8001416:	d002      	beq.n	800141e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d135      	bne.n	800148a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800141e:	4b78      	ldr	r3, [pc, #480]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	2380      	movs	r3, #128	@ 0x80
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	4013      	ands	r3, r2
 8001428:	d005      	beq.n	8001436 <HAL_RCC_OscConfig+0x162>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e256      	b.n	80018e4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001436:	4b72      	ldr	r3, [pc, #456]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	4a74      	ldr	r2, [pc, #464]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 800143c:	4013      	ands	r3, r2
 800143e:	0019      	movs	r1, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	021a      	lsls	r2, r3, #8
 8001446:	4b6e      	ldr	r3, [pc, #440]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 8001448:	430a      	orrs	r2, r1
 800144a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d112      	bne.n	8001478 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001452:	4b6b      	ldr	r3, [pc, #428]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a6e      	ldr	r2, [pc, #440]	@ (8001610 <HAL_RCC_OscConfig+0x33c>)
 8001458:	4013      	ands	r3, r2
 800145a:	0019      	movs	r1, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	691a      	ldr	r2, [r3, #16]
 8001460:	4b67      	ldr	r3, [pc, #412]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 8001462:	430a      	orrs	r2, r1
 8001464:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001466:	4b66      	ldr	r3, [pc, #408]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	0adb      	lsrs	r3, r3, #11
 800146c:	2207      	movs	r2, #7
 800146e:	4013      	ands	r3, r2
 8001470:	4a68      	ldr	r2, [pc, #416]	@ (8001614 <HAL_RCC_OscConfig+0x340>)
 8001472:	40da      	lsrs	r2, r3
 8001474:	4b68      	ldr	r3, [pc, #416]	@ (8001618 <HAL_RCC_OscConfig+0x344>)
 8001476:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001478:	4b68      	ldr	r3, [pc, #416]	@ (800161c <HAL_RCC_OscConfig+0x348>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	0018      	movs	r0, r3
 800147e:	f7ff fc41 	bl	8000d04 <HAL_InitTick>
 8001482:	1e03      	subs	r3, r0, #0
 8001484:	d051      	beq.n	800152a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e22c      	b.n	80018e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d030      	beq.n	80014f4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001492:	4b5b      	ldr	r3, [pc, #364]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a5e      	ldr	r2, [pc, #376]	@ (8001610 <HAL_RCC_OscConfig+0x33c>)
 8001498:	4013      	ands	r3, r2
 800149a:	0019      	movs	r1, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	691a      	ldr	r2, [r3, #16]
 80014a0:	4b57      	ldr	r3, [pc, #348]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 80014a2:	430a      	orrs	r2, r1
 80014a4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80014a6:	4b56      	ldr	r3, [pc, #344]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	4b55      	ldr	r3, [pc, #340]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 80014ac:	2180      	movs	r1, #128	@ 0x80
 80014ae:	0049      	lsls	r1, r1, #1
 80014b0:	430a      	orrs	r2, r1
 80014b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b4:	f7ff fc82 	bl	8000dbc <HAL_GetTick>
 80014b8:	0003      	movs	r3, r0
 80014ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014be:	f7ff fc7d 	bl	8000dbc <HAL_GetTick>
 80014c2:	0002      	movs	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e209      	b.n	80018e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014d0:	4b4b      	ldr	r3, [pc, #300]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	2380      	movs	r3, #128	@ 0x80
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	4013      	ands	r3, r2
 80014da:	d0f0      	beq.n	80014be <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014dc:	4b48      	ldr	r3, [pc, #288]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	4a4a      	ldr	r2, [pc, #296]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 80014e2:	4013      	ands	r3, r2
 80014e4:	0019      	movs	r1, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	021a      	lsls	r2, r3, #8
 80014ec:	4b44      	ldr	r3, [pc, #272]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 80014ee:	430a      	orrs	r2, r1
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	e01b      	b.n	800152c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80014f4:	4b42      	ldr	r3, [pc, #264]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b41      	ldr	r3, [pc, #260]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 80014fa:	4949      	ldr	r1, [pc, #292]	@ (8001620 <HAL_RCC_OscConfig+0x34c>)
 80014fc:	400a      	ands	r2, r1
 80014fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001500:	f7ff fc5c 	bl	8000dbc <HAL_GetTick>
 8001504:	0003      	movs	r3, r0
 8001506:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800150a:	f7ff fc57 	bl	8000dbc <HAL_GetTick>
 800150e:	0002      	movs	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e1e3      	b.n	80018e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800151c:	4b38      	ldr	r3, [pc, #224]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	2380      	movs	r3, #128	@ 0x80
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	4013      	ands	r3, r2
 8001526:	d1f0      	bne.n	800150a <HAL_RCC_OscConfig+0x236>
 8001528:	e000      	b.n	800152c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800152a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2208      	movs	r2, #8
 8001532:	4013      	ands	r3, r2
 8001534:	d047      	beq.n	80015c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001536:	4b32      	ldr	r3, [pc, #200]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2238      	movs	r2, #56	@ 0x38
 800153c:	4013      	ands	r3, r2
 800153e:	2b18      	cmp	r3, #24
 8001540:	d10a      	bne.n	8001558 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001542:	4b2f      	ldr	r3, [pc, #188]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 8001544:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001546:	2202      	movs	r2, #2
 8001548:	4013      	ands	r3, r2
 800154a:	d03c      	beq.n	80015c6 <HAL_RCC_OscConfig+0x2f2>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d138      	bne.n	80015c6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e1c5      	b.n	80018e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d019      	beq.n	8001594 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001560:	4b27      	ldr	r3, [pc, #156]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 8001562:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001564:	4b26      	ldr	r3, [pc, #152]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 8001566:	2101      	movs	r1, #1
 8001568:	430a      	orrs	r2, r1
 800156a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156c:	f7ff fc26 	bl	8000dbc <HAL_GetTick>
 8001570:	0003      	movs	r3, r0
 8001572:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001576:	f7ff fc21 	bl	8000dbc <HAL_GetTick>
 800157a:	0002      	movs	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e1ad      	b.n	80018e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001588:	4b1d      	ldr	r3, [pc, #116]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 800158a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800158c:	2202      	movs	r2, #2
 800158e:	4013      	ands	r3, r2
 8001590:	d0f1      	beq.n	8001576 <HAL_RCC_OscConfig+0x2a2>
 8001592:	e018      	b.n	80015c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001594:	4b1a      	ldr	r3, [pc, #104]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 8001596:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001598:	4b19      	ldr	r3, [pc, #100]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 800159a:	2101      	movs	r1, #1
 800159c:	438a      	bics	r2, r1
 800159e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a0:	f7ff fc0c 	bl	8000dbc <HAL_GetTick>
 80015a4:	0003      	movs	r3, r0
 80015a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015aa:	f7ff fc07 	bl	8000dbc <HAL_GetTick>
 80015ae:	0002      	movs	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e193      	b.n	80018e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015bc:	4b10      	ldr	r3, [pc, #64]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 80015be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015c0:	2202      	movs	r2, #2
 80015c2:	4013      	ands	r3, r2
 80015c4:	d1f1      	bne.n	80015aa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2204      	movs	r2, #4
 80015cc:	4013      	ands	r3, r2
 80015ce:	d100      	bne.n	80015d2 <HAL_RCC_OscConfig+0x2fe>
 80015d0:	e0c6      	b.n	8001760 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015d2:	231f      	movs	r3, #31
 80015d4:	18fb      	adds	r3, r7, r3
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80015da:	4b09      	ldr	r3, [pc, #36]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	2238      	movs	r2, #56	@ 0x38
 80015e0:	4013      	ands	r3, r2
 80015e2:	2b20      	cmp	r3, #32
 80015e4:	d11e      	bne.n	8001624 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80015e6:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <HAL_RCC_OscConfig+0x32c>)
 80015e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ea:	2202      	movs	r2, #2
 80015ec:	4013      	ands	r3, r2
 80015ee:	d100      	bne.n	80015f2 <HAL_RCC_OscConfig+0x31e>
 80015f0:	e0b6      	b.n	8001760 <HAL_RCC_OscConfig+0x48c>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d000      	beq.n	80015fc <HAL_RCC_OscConfig+0x328>
 80015fa:	e0b1      	b.n	8001760 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e171      	b.n	80018e4 <HAL_RCC_OscConfig+0x610>
 8001600:	40021000 	.word	0x40021000
 8001604:	fffeffff 	.word	0xfffeffff
 8001608:	fffbffff 	.word	0xfffbffff
 800160c:	ffff80ff 	.word	0xffff80ff
 8001610:	ffffc7ff 	.word	0xffffc7ff
 8001614:	00f42400 	.word	0x00f42400
 8001618:	20000000 	.word	0x20000000
 800161c:	20000004 	.word	0x20000004
 8001620:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001624:	4bb1      	ldr	r3, [pc, #708]	@ (80018ec <HAL_RCC_OscConfig+0x618>)
 8001626:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001628:	2380      	movs	r3, #128	@ 0x80
 800162a:	055b      	lsls	r3, r3, #21
 800162c:	4013      	ands	r3, r2
 800162e:	d101      	bne.n	8001634 <HAL_RCC_OscConfig+0x360>
 8001630:	2301      	movs	r3, #1
 8001632:	e000      	b.n	8001636 <HAL_RCC_OscConfig+0x362>
 8001634:	2300      	movs	r3, #0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d011      	beq.n	800165e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800163a:	4bac      	ldr	r3, [pc, #688]	@ (80018ec <HAL_RCC_OscConfig+0x618>)
 800163c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800163e:	4bab      	ldr	r3, [pc, #684]	@ (80018ec <HAL_RCC_OscConfig+0x618>)
 8001640:	2180      	movs	r1, #128	@ 0x80
 8001642:	0549      	lsls	r1, r1, #21
 8001644:	430a      	orrs	r2, r1
 8001646:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001648:	4ba8      	ldr	r3, [pc, #672]	@ (80018ec <HAL_RCC_OscConfig+0x618>)
 800164a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800164c:	2380      	movs	r3, #128	@ 0x80
 800164e:	055b      	lsls	r3, r3, #21
 8001650:	4013      	ands	r3, r2
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001656:	231f      	movs	r3, #31
 8001658:	18fb      	adds	r3, r7, r3
 800165a:	2201      	movs	r2, #1
 800165c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800165e:	4ba4      	ldr	r3, [pc, #656]	@ (80018f0 <HAL_RCC_OscConfig+0x61c>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	2380      	movs	r3, #128	@ 0x80
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	4013      	ands	r3, r2
 8001668:	d11a      	bne.n	80016a0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800166a:	4ba1      	ldr	r3, [pc, #644]	@ (80018f0 <HAL_RCC_OscConfig+0x61c>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	4ba0      	ldr	r3, [pc, #640]	@ (80018f0 <HAL_RCC_OscConfig+0x61c>)
 8001670:	2180      	movs	r1, #128	@ 0x80
 8001672:	0049      	lsls	r1, r1, #1
 8001674:	430a      	orrs	r2, r1
 8001676:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001678:	f7ff fba0 	bl	8000dbc <HAL_GetTick>
 800167c:	0003      	movs	r3, r0
 800167e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001682:	f7ff fb9b 	bl	8000dbc <HAL_GetTick>
 8001686:	0002      	movs	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e127      	b.n	80018e4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001694:	4b96      	ldr	r3, [pc, #600]	@ (80018f0 <HAL_RCC_OscConfig+0x61c>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	2380      	movs	r3, #128	@ 0x80
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	4013      	ands	r3, r2
 800169e:	d0f0      	beq.n	8001682 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d106      	bne.n	80016b6 <HAL_RCC_OscConfig+0x3e2>
 80016a8:	4b90      	ldr	r3, [pc, #576]	@ (80018ec <HAL_RCC_OscConfig+0x618>)
 80016aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80016ac:	4b8f      	ldr	r3, [pc, #572]	@ (80018ec <HAL_RCC_OscConfig+0x618>)
 80016ae:	2101      	movs	r1, #1
 80016b0:	430a      	orrs	r2, r1
 80016b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80016b4:	e01c      	b.n	80016f0 <HAL_RCC_OscConfig+0x41c>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	2b05      	cmp	r3, #5
 80016bc:	d10c      	bne.n	80016d8 <HAL_RCC_OscConfig+0x404>
 80016be:	4b8b      	ldr	r3, [pc, #556]	@ (80018ec <HAL_RCC_OscConfig+0x618>)
 80016c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80016c2:	4b8a      	ldr	r3, [pc, #552]	@ (80018ec <HAL_RCC_OscConfig+0x618>)
 80016c4:	2104      	movs	r1, #4
 80016c6:	430a      	orrs	r2, r1
 80016c8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80016ca:	4b88      	ldr	r3, [pc, #544]	@ (80018ec <HAL_RCC_OscConfig+0x618>)
 80016cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80016ce:	4b87      	ldr	r3, [pc, #540]	@ (80018ec <HAL_RCC_OscConfig+0x618>)
 80016d0:	2101      	movs	r1, #1
 80016d2:	430a      	orrs	r2, r1
 80016d4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80016d6:	e00b      	b.n	80016f0 <HAL_RCC_OscConfig+0x41c>
 80016d8:	4b84      	ldr	r3, [pc, #528]	@ (80018ec <HAL_RCC_OscConfig+0x618>)
 80016da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80016dc:	4b83      	ldr	r3, [pc, #524]	@ (80018ec <HAL_RCC_OscConfig+0x618>)
 80016de:	2101      	movs	r1, #1
 80016e0:	438a      	bics	r2, r1
 80016e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80016e4:	4b81      	ldr	r3, [pc, #516]	@ (80018ec <HAL_RCC_OscConfig+0x618>)
 80016e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80016e8:	4b80      	ldr	r3, [pc, #512]	@ (80018ec <HAL_RCC_OscConfig+0x618>)
 80016ea:	2104      	movs	r1, #4
 80016ec:	438a      	bics	r2, r1
 80016ee:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d014      	beq.n	8001722 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f8:	f7ff fb60 	bl	8000dbc <HAL_GetTick>
 80016fc:	0003      	movs	r3, r0
 80016fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001700:	e009      	b.n	8001716 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001702:	f7ff fb5b 	bl	8000dbc <HAL_GetTick>
 8001706:	0002      	movs	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	4a79      	ldr	r2, [pc, #484]	@ (80018f4 <HAL_RCC_OscConfig+0x620>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e0e6      	b.n	80018e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001716:	4b75      	ldr	r3, [pc, #468]	@ (80018ec <HAL_RCC_OscConfig+0x618>)
 8001718:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800171a:	2202      	movs	r2, #2
 800171c:	4013      	ands	r3, r2
 800171e:	d0f0      	beq.n	8001702 <HAL_RCC_OscConfig+0x42e>
 8001720:	e013      	b.n	800174a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001722:	f7ff fb4b 	bl	8000dbc <HAL_GetTick>
 8001726:	0003      	movs	r3, r0
 8001728:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800172a:	e009      	b.n	8001740 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800172c:	f7ff fb46 	bl	8000dbc <HAL_GetTick>
 8001730:	0002      	movs	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	4a6f      	ldr	r2, [pc, #444]	@ (80018f4 <HAL_RCC_OscConfig+0x620>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e0d1      	b.n	80018e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001740:	4b6a      	ldr	r3, [pc, #424]	@ (80018ec <HAL_RCC_OscConfig+0x618>)
 8001742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001744:	2202      	movs	r2, #2
 8001746:	4013      	ands	r3, r2
 8001748:	d1f0      	bne.n	800172c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800174a:	231f      	movs	r3, #31
 800174c:	18fb      	adds	r3, r7, r3
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d105      	bne.n	8001760 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001754:	4b65      	ldr	r3, [pc, #404]	@ (80018ec <HAL_RCC_OscConfig+0x618>)
 8001756:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001758:	4b64      	ldr	r3, [pc, #400]	@ (80018ec <HAL_RCC_OscConfig+0x618>)
 800175a:	4967      	ldr	r1, [pc, #412]	@ (80018f8 <HAL_RCC_OscConfig+0x624>)
 800175c:	400a      	ands	r2, r1
 800175e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d100      	bne.n	800176a <HAL_RCC_OscConfig+0x496>
 8001768:	e0bb      	b.n	80018e2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800176a:	4b60      	ldr	r3, [pc, #384]	@ (80018ec <HAL_RCC_OscConfig+0x618>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2238      	movs	r2, #56	@ 0x38
 8001770:	4013      	ands	r3, r2
 8001772:	2b10      	cmp	r3, #16
 8001774:	d100      	bne.n	8001778 <HAL_RCC_OscConfig+0x4a4>
 8001776:	e07b      	b.n	8001870 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	69db      	ldr	r3, [r3, #28]
 800177c:	2b02      	cmp	r3, #2
 800177e:	d156      	bne.n	800182e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001780:	4b5a      	ldr	r3, [pc, #360]	@ (80018ec <HAL_RCC_OscConfig+0x618>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b59      	ldr	r3, [pc, #356]	@ (80018ec <HAL_RCC_OscConfig+0x618>)
 8001786:	495d      	ldr	r1, [pc, #372]	@ (80018fc <HAL_RCC_OscConfig+0x628>)
 8001788:	400a      	ands	r2, r1
 800178a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178c:	f7ff fb16 	bl	8000dbc <HAL_GetTick>
 8001790:	0003      	movs	r3, r0
 8001792:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001796:	f7ff fb11 	bl	8000dbc <HAL_GetTick>
 800179a:	0002      	movs	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e09d      	b.n	80018e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017a8:	4b50      	ldr	r3, [pc, #320]	@ (80018ec <HAL_RCC_OscConfig+0x618>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	2380      	movs	r3, #128	@ 0x80
 80017ae:	049b      	lsls	r3, r3, #18
 80017b0:	4013      	ands	r3, r2
 80017b2:	d1f0      	bne.n	8001796 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017b4:	4b4d      	ldr	r3, [pc, #308]	@ (80018ec <HAL_RCC_OscConfig+0x618>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	4a51      	ldr	r2, [pc, #324]	@ (8001900 <HAL_RCC_OscConfig+0x62c>)
 80017ba:	4013      	ands	r3, r2
 80017bc:	0019      	movs	r1, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a1a      	ldr	r2, [r3, #32]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c6:	431a      	orrs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017cc:	021b      	lsls	r3, r3, #8
 80017ce:	431a      	orrs	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d4:	431a      	orrs	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017e0:	431a      	orrs	r2, r3
 80017e2:	4b42      	ldr	r3, [pc, #264]	@ (80018ec <HAL_RCC_OscConfig+0x618>)
 80017e4:	430a      	orrs	r2, r1
 80017e6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017e8:	4b40      	ldr	r3, [pc, #256]	@ (80018ec <HAL_RCC_OscConfig+0x618>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4b3f      	ldr	r3, [pc, #252]	@ (80018ec <HAL_RCC_OscConfig+0x618>)
 80017ee:	2180      	movs	r1, #128	@ 0x80
 80017f0:	0449      	lsls	r1, r1, #17
 80017f2:	430a      	orrs	r2, r1
 80017f4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80017f6:	4b3d      	ldr	r3, [pc, #244]	@ (80018ec <HAL_RCC_OscConfig+0x618>)
 80017f8:	68da      	ldr	r2, [r3, #12]
 80017fa:	4b3c      	ldr	r3, [pc, #240]	@ (80018ec <HAL_RCC_OscConfig+0x618>)
 80017fc:	2180      	movs	r1, #128	@ 0x80
 80017fe:	0549      	lsls	r1, r1, #21
 8001800:	430a      	orrs	r2, r1
 8001802:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001804:	f7ff fada 	bl	8000dbc <HAL_GetTick>
 8001808:	0003      	movs	r3, r0
 800180a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800180e:	f7ff fad5 	bl	8000dbc <HAL_GetTick>
 8001812:	0002      	movs	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e061      	b.n	80018e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001820:	4b32      	ldr	r3, [pc, #200]	@ (80018ec <HAL_RCC_OscConfig+0x618>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	2380      	movs	r3, #128	@ 0x80
 8001826:	049b      	lsls	r3, r3, #18
 8001828:	4013      	ands	r3, r2
 800182a:	d0f0      	beq.n	800180e <HAL_RCC_OscConfig+0x53a>
 800182c:	e059      	b.n	80018e2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800182e:	4b2f      	ldr	r3, [pc, #188]	@ (80018ec <HAL_RCC_OscConfig+0x618>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	4b2e      	ldr	r3, [pc, #184]	@ (80018ec <HAL_RCC_OscConfig+0x618>)
 8001834:	4931      	ldr	r1, [pc, #196]	@ (80018fc <HAL_RCC_OscConfig+0x628>)
 8001836:	400a      	ands	r2, r1
 8001838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183a:	f7ff fabf 	bl	8000dbc <HAL_GetTick>
 800183e:	0003      	movs	r3, r0
 8001840:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001844:	f7ff faba 	bl	8000dbc <HAL_GetTick>
 8001848:	0002      	movs	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e046      	b.n	80018e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001856:	4b25      	ldr	r3, [pc, #148]	@ (80018ec <HAL_RCC_OscConfig+0x618>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	2380      	movs	r3, #128	@ 0x80
 800185c:	049b      	lsls	r3, r3, #18
 800185e:	4013      	ands	r3, r2
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001862:	4b22      	ldr	r3, [pc, #136]	@ (80018ec <HAL_RCC_OscConfig+0x618>)
 8001864:	68da      	ldr	r2, [r3, #12]
 8001866:	4b21      	ldr	r3, [pc, #132]	@ (80018ec <HAL_RCC_OscConfig+0x618>)
 8001868:	4926      	ldr	r1, [pc, #152]	@ (8001904 <HAL_RCC_OscConfig+0x630>)
 800186a:	400a      	ands	r2, r1
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	e038      	b.n	80018e2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69db      	ldr	r3, [r3, #28]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d101      	bne.n	800187c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e033      	b.n	80018e4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800187c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ec <HAL_RCC_OscConfig+0x618>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	2203      	movs	r2, #3
 8001886:	401a      	ands	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	429a      	cmp	r2, r3
 800188e:	d126      	bne.n	80018de <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	2270      	movs	r2, #112	@ 0x70
 8001894:	401a      	ands	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800189a:	429a      	cmp	r2, r3
 800189c:	d11f      	bne.n	80018de <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	23fe      	movs	r3, #254	@ 0xfe
 80018a2:	01db      	lsls	r3, r3, #7
 80018a4:	401a      	ands	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018aa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d116      	bne.n	80018de <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	23f8      	movs	r3, #248	@ 0xf8
 80018b4:	039b      	lsls	r3, r3, #14
 80018b6:	401a      	ands	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018bc:	429a      	cmp	r2, r3
 80018be:	d10e      	bne.n	80018de <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	23e0      	movs	r3, #224	@ 0xe0
 80018c4:	051b      	lsls	r3, r3, #20
 80018c6:	401a      	ands	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d106      	bne.n	80018de <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	0f5b      	lsrs	r3, r3, #29
 80018d4:	075a      	lsls	r2, r3, #29
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80018da:	429a      	cmp	r2, r3
 80018dc:	d001      	beq.n	80018e2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e000      	b.n	80018e4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	0018      	movs	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	b008      	add	sp, #32
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40007000 	.word	0x40007000
 80018f4:	00001388 	.word	0x00001388
 80018f8:	efffffff 	.word	0xefffffff
 80018fc:	feffffff 	.word	0xfeffffff
 8001900:	11c1808c 	.word	0x11c1808c
 8001904:	eefefffc 	.word	0xeefefffc

08001908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d101      	bne.n	800191c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e0e9      	b.n	8001af0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800191c:	4b76      	ldr	r3, [pc, #472]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2207      	movs	r2, #7
 8001922:	4013      	ands	r3, r2
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	429a      	cmp	r2, r3
 8001928:	d91e      	bls.n	8001968 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192a:	4b73      	ldr	r3, [pc, #460]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2207      	movs	r2, #7
 8001930:	4393      	bics	r3, r2
 8001932:	0019      	movs	r1, r3
 8001934:	4b70      	ldr	r3, [pc, #448]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f0>)
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	430a      	orrs	r2, r1
 800193a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800193c:	f7ff fa3e 	bl	8000dbc <HAL_GetTick>
 8001940:	0003      	movs	r3, r0
 8001942:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001944:	e009      	b.n	800195a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001946:	f7ff fa39 	bl	8000dbc <HAL_GetTick>
 800194a:	0002      	movs	r2, r0
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	4a6a      	ldr	r2, [pc, #424]	@ (8001afc <HAL_RCC_ClockConfig+0x1f4>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d901      	bls.n	800195a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e0ca      	b.n	8001af0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800195a:	4b67      	ldr	r3, [pc, #412]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2207      	movs	r2, #7
 8001960:	4013      	ands	r3, r2
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	429a      	cmp	r2, r3
 8001966:	d1ee      	bne.n	8001946 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2202      	movs	r2, #2
 800196e:	4013      	ands	r3, r2
 8001970:	d015      	beq.n	800199e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2204      	movs	r2, #4
 8001978:	4013      	ands	r3, r2
 800197a:	d006      	beq.n	800198a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800197c:	4b60      	ldr	r3, [pc, #384]	@ (8001b00 <HAL_RCC_ClockConfig+0x1f8>)
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	4b5f      	ldr	r3, [pc, #380]	@ (8001b00 <HAL_RCC_ClockConfig+0x1f8>)
 8001982:	21e0      	movs	r1, #224	@ 0xe0
 8001984:	01c9      	lsls	r1, r1, #7
 8001986:	430a      	orrs	r2, r1
 8001988:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800198a:	4b5d      	ldr	r3, [pc, #372]	@ (8001b00 <HAL_RCC_ClockConfig+0x1f8>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	4a5d      	ldr	r2, [pc, #372]	@ (8001b04 <HAL_RCC_ClockConfig+0x1fc>)
 8001990:	4013      	ands	r3, r2
 8001992:	0019      	movs	r1, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	4b59      	ldr	r3, [pc, #356]	@ (8001b00 <HAL_RCC_ClockConfig+0x1f8>)
 800199a:	430a      	orrs	r2, r1
 800199c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2201      	movs	r2, #1
 80019a4:	4013      	ands	r3, r2
 80019a6:	d057      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d107      	bne.n	80019c0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019b0:	4b53      	ldr	r3, [pc, #332]	@ (8001b00 <HAL_RCC_ClockConfig+0x1f8>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	2380      	movs	r3, #128	@ 0x80
 80019b6:	029b      	lsls	r3, r3, #10
 80019b8:	4013      	ands	r3, r2
 80019ba:	d12b      	bne.n	8001a14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e097      	b.n	8001af0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d107      	bne.n	80019d8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c8:	4b4d      	ldr	r3, [pc, #308]	@ (8001b00 <HAL_RCC_ClockConfig+0x1f8>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	2380      	movs	r3, #128	@ 0x80
 80019ce:	049b      	lsls	r3, r3, #18
 80019d0:	4013      	ands	r3, r2
 80019d2:	d11f      	bne.n	8001a14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e08b      	b.n	8001af0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d107      	bne.n	80019f0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019e0:	4b47      	ldr	r3, [pc, #284]	@ (8001b00 <HAL_RCC_ClockConfig+0x1f8>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	2380      	movs	r3, #128	@ 0x80
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	4013      	ands	r3, r2
 80019ea:	d113      	bne.n	8001a14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e07f      	b.n	8001af0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	2b03      	cmp	r3, #3
 80019f6:	d106      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019f8:	4b41      	ldr	r3, [pc, #260]	@ (8001b00 <HAL_RCC_ClockConfig+0x1f8>)
 80019fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019fc:	2202      	movs	r2, #2
 80019fe:	4013      	ands	r3, r2
 8001a00:	d108      	bne.n	8001a14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e074      	b.n	8001af0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a06:	4b3e      	ldr	r3, [pc, #248]	@ (8001b00 <HAL_RCC_ClockConfig+0x1f8>)
 8001a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d101      	bne.n	8001a14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e06d      	b.n	8001af0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a14:	4b3a      	ldr	r3, [pc, #232]	@ (8001b00 <HAL_RCC_ClockConfig+0x1f8>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	2207      	movs	r2, #7
 8001a1a:	4393      	bics	r3, r2
 8001a1c:	0019      	movs	r1, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	4b37      	ldr	r3, [pc, #220]	@ (8001b00 <HAL_RCC_ClockConfig+0x1f8>)
 8001a24:	430a      	orrs	r2, r1
 8001a26:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a28:	f7ff f9c8 	bl	8000dbc <HAL_GetTick>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a30:	e009      	b.n	8001a46 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a32:	f7ff f9c3 	bl	8000dbc <HAL_GetTick>
 8001a36:	0002      	movs	r2, r0
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	4a2f      	ldr	r2, [pc, #188]	@ (8001afc <HAL_RCC_ClockConfig+0x1f4>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e054      	b.n	8001af0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a46:	4b2e      	ldr	r3, [pc, #184]	@ (8001b00 <HAL_RCC_ClockConfig+0x1f8>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	2238      	movs	r2, #56	@ 0x38
 8001a4c:	401a      	ands	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d1ec      	bne.n	8001a32 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a58:	4b27      	ldr	r3, [pc, #156]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2207      	movs	r2, #7
 8001a5e:	4013      	ands	r3, r2
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d21e      	bcs.n	8001aa4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a66:	4b24      	ldr	r3, [pc, #144]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2207      	movs	r2, #7
 8001a6c:	4393      	bics	r3, r2
 8001a6e:	0019      	movs	r1, r3
 8001a70:	4b21      	ldr	r3, [pc, #132]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	430a      	orrs	r2, r1
 8001a76:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a78:	f7ff f9a0 	bl	8000dbc <HAL_GetTick>
 8001a7c:	0003      	movs	r3, r0
 8001a7e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a80:	e009      	b.n	8001a96 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a82:	f7ff f99b 	bl	8000dbc <HAL_GetTick>
 8001a86:	0002      	movs	r2, r0
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	4a1b      	ldr	r2, [pc, #108]	@ (8001afc <HAL_RCC_ClockConfig+0x1f4>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e02c      	b.n	8001af0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a96:	4b18      	ldr	r3, [pc, #96]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2207      	movs	r2, #7
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d1ee      	bne.n	8001a82 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2204      	movs	r2, #4
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d009      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001aae:	4b14      	ldr	r3, [pc, #80]	@ (8001b00 <HAL_RCC_ClockConfig+0x1f8>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	4a15      	ldr	r2, [pc, #84]	@ (8001b08 <HAL_RCC_ClockConfig+0x200>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	0019      	movs	r1, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68da      	ldr	r2, [r3, #12]
 8001abc:	4b10      	ldr	r3, [pc, #64]	@ (8001b00 <HAL_RCC_ClockConfig+0x1f8>)
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001ac2:	f000 f829 	bl	8001b18 <HAL_RCC_GetSysClockFreq>
 8001ac6:	0001      	movs	r1, r0
 8001ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8001b00 <HAL_RCC_ClockConfig+0x1f8>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	0a1b      	lsrs	r3, r3, #8
 8001ace:	220f      	movs	r2, #15
 8001ad0:	401a      	ands	r2, r3
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b0c <HAL_RCC_ClockConfig+0x204>)
 8001ad4:	0092      	lsls	r2, r2, #2
 8001ad6:	58d3      	ldr	r3, [r2, r3]
 8001ad8:	221f      	movs	r2, #31
 8001ada:	4013      	ands	r3, r2
 8001adc:	000a      	movs	r2, r1
 8001ade:	40da      	lsrs	r2, r3
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <HAL_RCC_ClockConfig+0x208>)
 8001ae2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b14 <HAL_RCC_ClockConfig+0x20c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	0018      	movs	r0, r3
 8001aea:	f7ff f90b 	bl	8000d04 <HAL_InitTick>
 8001aee:	0003      	movs	r3, r0
}
 8001af0:	0018      	movs	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	b004      	add	sp, #16
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40022000 	.word	0x40022000
 8001afc:	00001388 	.word	0x00001388
 8001b00:	40021000 	.word	0x40021000
 8001b04:	fffff0ff 	.word	0xfffff0ff
 8001b08:	ffff8fff 	.word	0xffff8fff
 8001b0c:	08003b88 	.word	0x08003b88
 8001b10:	20000000 	.word	0x20000000
 8001b14:	20000004 	.word	0x20000004

08001b18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b1e:	4b3c      	ldr	r3, [pc, #240]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2238      	movs	r2, #56	@ 0x38
 8001b24:	4013      	ands	r3, r2
 8001b26:	d10f      	bne.n	8001b48 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001b28:	4b39      	ldr	r3, [pc, #228]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	0adb      	lsrs	r3, r3, #11
 8001b2e:	2207      	movs	r2, #7
 8001b30:	4013      	ands	r3, r2
 8001b32:	2201      	movs	r2, #1
 8001b34:	409a      	lsls	r2, r3
 8001b36:	0013      	movs	r3, r2
 8001b38:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001b3a:	6839      	ldr	r1, [r7, #0]
 8001b3c:	4835      	ldr	r0, [pc, #212]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b3e:	f7fe fae3 	bl	8000108 <__udivsi3>
 8001b42:	0003      	movs	r3, r0
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	e05d      	b.n	8001c04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b48:	4b31      	ldr	r3, [pc, #196]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2238      	movs	r2, #56	@ 0x38
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d102      	bne.n	8001b5a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b54:	4b30      	ldr	r3, [pc, #192]	@ (8001c18 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	e054      	b.n	8001c04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2238      	movs	r2, #56	@ 0x38
 8001b60:	4013      	ands	r3, r2
 8001b62:	2b10      	cmp	r3, #16
 8001b64:	d138      	bne.n	8001bd8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001b66:	4b2a      	ldr	r3, [pc, #168]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b70:	4b27      	ldr	r3, [pc, #156]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	091b      	lsrs	r3, r3, #4
 8001b76:	2207      	movs	r2, #7
 8001b78:	4013      	ands	r3, r2
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2b03      	cmp	r3, #3
 8001b82:	d10d      	bne.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b84:	68b9      	ldr	r1, [r7, #8]
 8001b86:	4824      	ldr	r0, [pc, #144]	@ (8001c18 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b88:	f7fe fabe 	bl	8000108 <__udivsi3>
 8001b8c:	0003      	movs	r3, r0
 8001b8e:	0019      	movs	r1, r3
 8001b90:	4b1f      	ldr	r3, [pc, #124]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	0a1b      	lsrs	r3, r3, #8
 8001b96:	227f      	movs	r2, #127	@ 0x7f
 8001b98:	4013      	ands	r3, r2
 8001b9a:	434b      	muls	r3, r1
 8001b9c:	617b      	str	r3, [r7, #20]
        break;
 8001b9e:	e00d      	b.n	8001bbc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001ba0:	68b9      	ldr	r1, [r7, #8]
 8001ba2:	481c      	ldr	r0, [pc, #112]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ba4:	f7fe fab0 	bl	8000108 <__udivsi3>
 8001ba8:	0003      	movs	r3, r0
 8001baa:	0019      	movs	r1, r3
 8001bac:	4b18      	ldr	r3, [pc, #96]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	0a1b      	lsrs	r3, r3, #8
 8001bb2:	227f      	movs	r2, #127	@ 0x7f
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	434b      	muls	r3, r1
 8001bb8:	617b      	str	r3, [r7, #20]
        break;
 8001bba:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001bbc:	4b14      	ldr	r3, [pc, #80]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	0f5b      	lsrs	r3, r3, #29
 8001bc2:	2207      	movs	r2, #7
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	6978      	ldr	r0, [r7, #20]
 8001bce:	f7fe fa9b 	bl	8000108 <__udivsi3>
 8001bd2:	0003      	movs	r3, r0
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	e015      	b.n	8001c04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001bd8:	4b0d      	ldr	r3, [pc, #52]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	2238      	movs	r2, #56	@ 0x38
 8001bde:	4013      	ands	r3, r2
 8001be0:	2b20      	cmp	r3, #32
 8001be2:	d103      	bne.n	8001bec <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001be4:	2380      	movs	r3, #128	@ 0x80
 8001be6:	021b      	lsls	r3, r3, #8
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	e00b      	b.n	8001c04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001bec:	4b08      	ldr	r3, [pc, #32]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	2238      	movs	r2, #56	@ 0x38
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	2b18      	cmp	r3, #24
 8001bf6:	d103      	bne.n	8001c00 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001bf8:	23fa      	movs	r3, #250	@ 0xfa
 8001bfa:	01db      	lsls	r3, r3, #7
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	e001      	b.n	8001c04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c04:	693b      	ldr	r3, [r7, #16]
}
 8001c06:	0018      	movs	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	b006      	add	sp, #24
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	46c0      	nop			@ (mov r8, r8)
 8001c10:	40021000 	.word	0x40021000
 8001c14:	00f42400 	.word	0x00f42400
 8001c18:	007a1200 	.word	0x007a1200

08001c1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c20:	4b02      	ldr	r3, [pc, #8]	@ (8001c2c <HAL_RCC_GetHCLKFreq+0x10>)
 8001c22:	681b      	ldr	r3, [r3, #0]
}
 8001c24:	0018      	movs	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	46c0      	nop			@ (mov r8, r8)
 8001c2c:	20000000 	.word	0x20000000

08001c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c30:	b5b0      	push	{r4, r5, r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001c34:	f7ff fff2 	bl	8001c1c <HAL_RCC_GetHCLKFreq>
 8001c38:	0004      	movs	r4, r0
 8001c3a:	f7ff fb3f 	bl	80012bc <LL_RCC_GetAPB1Prescaler>
 8001c3e:	0003      	movs	r3, r0
 8001c40:	0b1a      	lsrs	r2, r3, #12
 8001c42:	4b05      	ldr	r3, [pc, #20]	@ (8001c58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c44:	0092      	lsls	r2, r2, #2
 8001c46:	58d3      	ldr	r3, [r2, r3]
 8001c48:	221f      	movs	r2, #31
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	40dc      	lsrs	r4, r3
 8001c4e:	0023      	movs	r3, r4
}
 8001c50:	0018      	movs	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bdb0      	pop	{r4, r5, r7, pc}
 8001c56:	46c0      	nop			@ (mov r8, r8)
 8001c58:	08003bc8 	.word	0x08003bc8

08001c5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001c64:	2313      	movs	r3, #19
 8001c66:	18fb      	adds	r3, r7, r3
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c6c:	2312      	movs	r3, #18
 8001c6e:	18fb      	adds	r3, r7, r3
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	2380      	movs	r3, #128	@ 0x80
 8001c7a:	029b      	lsls	r3, r3, #10
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d100      	bne.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001c80:	e0ad      	b.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c82:	2011      	movs	r0, #17
 8001c84:	183b      	adds	r3, r7, r0
 8001c86:	2200      	movs	r2, #0
 8001c88:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c8a:	4b47      	ldr	r3, [pc, #284]	@ (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c8e:	2380      	movs	r3, #128	@ 0x80
 8001c90:	055b      	lsls	r3, r3, #21
 8001c92:	4013      	ands	r3, r2
 8001c94:	d110      	bne.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c96:	4b44      	ldr	r3, [pc, #272]	@ (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c9a:	4b43      	ldr	r3, [pc, #268]	@ (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c9c:	2180      	movs	r1, #128	@ 0x80
 8001c9e:	0549      	lsls	r1, r1, #21
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ca4:	4b40      	ldr	r3, [pc, #256]	@ (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ca6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ca8:	2380      	movs	r3, #128	@ 0x80
 8001caa:	055b      	lsls	r3, r3, #21
 8001cac:	4013      	ands	r3, r2
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cb2:	183b      	adds	r3, r7, r0
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cb8:	4b3c      	ldr	r3, [pc, #240]	@ (8001dac <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	4b3b      	ldr	r3, [pc, #236]	@ (8001dac <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001cbe:	2180      	movs	r1, #128	@ 0x80
 8001cc0:	0049      	lsls	r1, r1, #1
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001cc6:	f7ff f879 	bl	8000dbc <HAL_GetTick>
 8001cca:	0003      	movs	r3, r0
 8001ccc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cce:	e00b      	b.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd0:	f7ff f874 	bl	8000dbc <HAL_GetTick>
 8001cd4:	0002      	movs	r2, r0
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d904      	bls.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001cde:	2313      	movs	r3, #19
 8001ce0:	18fb      	adds	r3, r7, r3
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	701a      	strb	r2, [r3, #0]
        break;
 8001ce6:	e005      	b.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ce8:	4b30      	ldr	r3, [pc, #192]	@ (8001dac <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	2380      	movs	r3, #128	@ 0x80
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d0ed      	beq.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001cf4:	2313      	movs	r3, #19
 8001cf6:	18fb      	adds	r3, r7, r3
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d15e      	bne.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001cfe:	4b2a      	ldr	r3, [pc, #168]	@ (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d00:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d02:	23c0      	movs	r3, #192	@ 0xc0
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4013      	ands	r3, r2
 8001d08:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d019      	beq.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d014      	beq.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d1a:	4b23      	ldr	r3, [pc, #140]	@ (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d1e:	4a24      	ldr	r2, [pc, #144]	@ (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001d20:	4013      	ands	r3, r2
 8001d22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d24:	4b20      	ldr	r3, [pc, #128]	@ (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d26:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d28:	4b1f      	ldr	r3, [pc, #124]	@ (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d2a:	2180      	movs	r1, #128	@ 0x80
 8001d2c:	0249      	lsls	r1, r1, #9
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d32:	4b1d      	ldr	r3, [pc, #116]	@ (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d34:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d36:	4b1c      	ldr	r3, [pc, #112]	@ (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d38:	491e      	ldr	r1, [pc, #120]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001d3a:	400a      	ands	r2, r1
 8001d3c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	2201      	movs	r2, #1
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d016      	beq.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4c:	f7ff f836 	bl	8000dbc <HAL_GetTick>
 8001d50:	0003      	movs	r3, r0
 8001d52:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d54:	e00c      	b.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d56:	f7ff f831 	bl	8000dbc <HAL_GetTick>
 8001d5a:	0002      	movs	r2, r0
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	4a15      	ldr	r2, [pc, #84]	@ (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d904      	bls.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001d66:	2313      	movs	r3, #19
 8001d68:	18fb      	adds	r3, r7, r3
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	701a      	strb	r2, [r3, #0]
            break;
 8001d6e:	e004      	b.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d70:	4b0d      	ldr	r3, [pc, #52]	@ (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d74:	2202      	movs	r2, #2
 8001d76:	4013      	ands	r3, r2
 8001d78:	d0ed      	beq.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001d7a:	2313      	movs	r3, #19
 8001d7c:	18fb      	adds	r3, r7, r3
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10a      	bne.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d84:	4b08      	ldr	r3, [pc, #32]	@ (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d88:	4a09      	ldr	r2, [pc, #36]	@ (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	0019      	movs	r1, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d92:	4b05      	ldr	r3, [pc, #20]	@ (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d94:	430a      	orrs	r2, r1
 8001d96:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d98:	e016      	b.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d9a:	2312      	movs	r3, #18
 8001d9c:	18fb      	adds	r3, r7, r3
 8001d9e:	2213      	movs	r2, #19
 8001da0:	18ba      	adds	r2, r7, r2
 8001da2:	7812      	ldrb	r2, [r2, #0]
 8001da4:	701a      	strb	r2, [r3, #0]
 8001da6:	e00f      	b.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40007000 	.word	0x40007000
 8001db0:	fffffcff 	.word	0xfffffcff
 8001db4:	fffeffff 	.word	0xfffeffff
 8001db8:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001dbc:	2312      	movs	r3, #18
 8001dbe:	18fb      	adds	r3, r7, r3
 8001dc0:	2213      	movs	r2, #19
 8001dc2:	18ba      	adds	r2, r7, r2
 8001dc4:	7812      	ldrb	r2, [r2, #0]
 8001dc6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001dc8:	2311      	movs	r3, #17
 8001dca:	18fb      	adds	r3, r7, r3
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d105      	bne.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dd2:	4b84      	ldr	r3, [pc, #528]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001dd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001dd6:	4b83      	ldr	r3, [pc, #524]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001dd8:	4983      	ldr	r1, [pc, #524]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8001dda:	400a      	ands	r2, r1
 8001ddc:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2201      	movs	r2, #1
 8001de4:	4013      	ands	r3, r2
 8001de6:	d009      	beq.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001de8:	4b7e      	ldr	r3, [pc, #504]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dec:	2203      	movs	r2, #3
 8001dee:	4393      	bics	r3, r2
 8001df0:	0019      	movs	r1, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	4b7b      	ldr	r3, [pc, #492]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2202      	movs	r2, #2
 8001e02:	4013      	ands	r3, r2
 8001e04:	d009      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e06:	4b77      	ldr	r3, [pc, #476]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e0a:	220c      	movs	r2, #12
 8001e0c:	4393      	bics	r3, r2
 8001e0e:	0019      	movs	r1, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	4b73      	ldr	r3, [pc, #460]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001e16:	430a      	orrs	r2, r1
 8001e18:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2210      	movs	r2, #16
 8001e20:	4013      	ands	r3, r2
 8001e22:	d009      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e24:	4b6f      	ldr	r3, [pc, #444]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e28:	4a70      	ldr	r2, [pc, #448]	@ (8001fec <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	0019      	movs	r1, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	4b6c      	ldr	r3, [pc, #432]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001e34:	430a      	orrs	r2, r1
 8001e36:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	2380      	movs	r3, #128	@ 0x80
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4013      	ands	r3, r2
 8001e42:	d009      	beq.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e44:	4b67      	ldr	r3, [pc, #412]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e48:	4a69      	ldr	r2, [pc, #420]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	0019      	movs	r1, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	699a      	ldr	r2, [r3, #24]
 8001e52:	4b64      	ldr	r3, [pc, #400]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001e54:	430a      	orrs	r2, r1
 8001e56:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	2380      	movs	r3, #128	@ 0x80
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	4013      	ands	r3, r2
 8001e62:	d009      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001e64:	4b5f      	ldr	r3, [pc, #380]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e68:	4a62      	ldr	r2, [pc, #392]	@ (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	0019      	movs	r1, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69da      	ldr	r2, [r3, #28]
 8001e72:	4b5c      	ldr	r3, [pc, #368]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001e74:	430a      	orrs	r2, r1
 8001e76:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2220      	movs	r2, #32
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d009      	beq.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e82:	4b58      	ldr	r3, [pc, #352]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e86:	4a5c      	ldr	r2, [pc, #368]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8001e88:	4013      	ands	r3, r2
 8001e8a:	0019      	movs	r1, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	691a      	ldr	r2, [r3, #16]
 8001e90:	4b54      	ldr	r3, [pc, #336]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001e92:	430a      	orrs	r2, r1
 8001e94:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* (RCC_CCIPR_I2C2SEL */

#if defined(RNG)
  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	2380      	movs	r3, #128	@ 0x80
 8001e9c:	02db      	lsls	r3, r3, #11
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d016      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001ea2:	4b50      	ldr	r3, [pc, #320]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ea6:	4a55      	ldr	r2, [pc, #340]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	0019      	movs	r1, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a1a      	ldr	r2, [r3, #32]
 8001eb0:	4b4c      	ldr	r3, [pc, #304]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a1a      	ldr	r2, [r3, #32]
 8001eba:	23c0      	movs	r3, #192	@ 0xc0
 8001ebc:	051b      	lsls	r3, r3, #20
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d106      	bne.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x274>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001ec2:	4b48      	ldr	r3, [pc, #288]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001ec4:	68da      	ldr	r2, [r3, #12]
 8001ec6:	4b47      	ldr	r3, [pc, #284]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001ec8:	2180      	movs	r1, #128	@ 0x80
 8001eca:	0449      	lsls	r1, r1, #17
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	2380      	movs	r3, #128	@ 0x80
 8001ed6:	01db      	lsls	r3, r3, #7
 8001ed8:	4013      	ands	r3, r2
 8001eda:	d015      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001edc:	4b41      	ldr	r3, [pc, #260]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	0899      	lsrs	r1, r3, #2
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ee8:	4b3e      	ldr	r3, [pc, #248]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001eea:	430a      	orrs	r2, r1
 8001eec:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ef2:	2380      	movs	r3, #128	@ 0x80
 8001ef4:	05db      	lsls	r3, r3, #23
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d106      	bne.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001efa:	4b3a      	ldr	r3, [pc, #232]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	4b39      	ldr	r3, [pc, #228]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001f00:	2180      	movs	r1, #128	@ 0x80
 8001f02:	0249      	lsls	r1, r1, #9
 8001f04:	430a      	orrs	r2, r1
 8001f06:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	2380      	movs	r3, #128	@ 0x80
 8001f0e:	031b      	lsls	r3, r3, #12
 8001f10:	4013      	ands	r3, r2
 8001f12:	d009      	beq.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001f14:	4b33      	ldr	r3, [pc, #204]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f18:	2240      	movs	r2, #64	@ 0x40
 8001f1a:	4393      	bics	r3, r2
 8001f1c:	0019      	movs	r1, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f22:	4b30      	ldr	r3, [pc, #192]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001f24:	430a      	orrs	r2, r1
 8001f26:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	2380      	movs	r3, #128	@ 0x80
 8001f2e:	039b      	lsls	r3, r3, #14
 8001f30:	4013      	ands	r3, r2
 8001f32:	d016      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001f34:	4b2b      	ldr	r3, [pc, #172]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f38:	4a31      	ldr	r2, [pc, #196]	@ (8002000 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	0019      	movs	r1, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f42:	4b28      	ldr	r3, [pc, #160]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001f44:	430a      	orrs	r2, r1
 8001f46:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f4c:	2380      	movs	r3, #128	@ 0x80
 8001f4e:	03db      	lsls	r3, r3, #15
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d106      	bne.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x306>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001f54:	4b23      	ldr	r3, [pc, #140]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	4b22      	ldr	r3, [pc, #136]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001f5a:	2180      	movs	r1, #128	@ 0x80
 8001f5c:	0449      	lsls	r1, r1, #17
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	2380      	movs	r3, #128	@ 0x80
 8001f68:	03db      	lsls	r3, r3, #15
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d016      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001f6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f72:	4a24      	ldr	r2, [pc, #144]	@ (8002004 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	0019      	movs	r1, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f7c:	4b19      	ldr	r3, [pc, #100]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f86:	2380      	movs	r3, #128	@ 0x80
 8001f88:	045b      	lsls	r3, r3, #17
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d106      	bne.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x340>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001f8e:	4b15      	ldr	r3, [pc, #84]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001f90:	68da      	ldr	r2, [r3, #12]
 8001f92:	4b14      	ldr	r3, [pc, #80]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001f94:	2180      	movs	r1, #128	@ 0x80
 8001f96:	0449      	lsls	r1, r1, #17
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	2380      	movs	r3, #128	@ 0x80
 8001fa2:	011b      	lsls	r3, r3, #4
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d016      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fac:	4a16      	ldr	r2, [pc, #88]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8001fae:	4013      	ands	r3, r2
 8001fb0:	0019      	movs	r1, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695a      	ldr	r2, [r3, #20]
 8001fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	695a      	ldr	r2, [r3, #20]
 8001fc0:	2380      	movs	r3, #128	@ 0x80
 8001fc2:	01db      	lsls	r3, r3, #7
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d106      	bne.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001fc8:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001fca:	68da      	ldr	r2, [r3, #12]
 8001fcc:	4b05      	ldr	r3, [pc, #20]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001fce:	2180      	movs	r1, #128	@ 0x80
 8001fd0:	0249      	lsls	r1, r1, #9
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001fd6:	2312      	movs	r3, #18
 8001fd8:	18fb      	adds	r3, r7, r3
 8001fda:	781b      	ldrb	r3, [r3, #0]
}
 8001fdc:	0018      	movs	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	b006      	add	sp, #24
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	efffffff 	.word	0xefffffff
 8001fec:	fffff3ff 	.word	0xfffff3ff
 8001ff0:	fff3ffff 	.word	0xfff3ffff
 8001ff4:	ffcfffff 	.word	0xffcfffff
 8001ff8:	ffffcfff 	.word	0xffffcfff
 8001ffc:	f3ffffff 	.word	0xf3ffffff
 8002000:	ffbfffff 	.word	0xffbfffff
 8002004:	feffffff 	.word	0xfeffffff
 8002008:	ffff3fff 	.word	0xffff3fff

0800200c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e0a8      	b.n	8002170 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002022:	2b00      	cmp	r3, #0
 8002024:	d109      	bne.n	800203a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	2382      	movs	r3, #130	@ 0x82
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	429a      	cmp	r2, r3
 8002030:	d009      	beq.n	8002046 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	61da      	str	r2, [r3, #28]
 8002038:	e005      	b.n	8002046 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	225d      	movs	r2, #93	@ 0x5d
 8002050:	5c9b      	ldrb	r3, [r3, r2]
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	d107      	bne.n	8002068 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	225c      	movs	r2, #92	@ 0x5c
 800205c:	2100      	movs	r1, #0
 800205e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	0018      	movs	r0, r3
 8002064:	f7fe fc8a 	bl	800097c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	225d      	movs	r2, #93	@ 0x5d
 800206c:	2102      	movs	r1, #2
 800206e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2140      	movs	r1, #64	@ 0x40
 800207c:	438a      	bics	r2, r1
 800207e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68da      	ldr	r2, [r3, #12]
 8002084:	23e0      	movs	r3, #224	@ 0xe0
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	429a      	cmp	r2, r3
 800208a:	d902      	bls.n	8002092 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800208c:	2300      	movs	r3, #0
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	e002      	b.n	8002098 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002092:	2380      	movs	r3, #128	@ 0x80
 8002094:	015b      	lsls	r3, r3, #5
 8002096:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	23f0      	movs	r3, #240	@ 0xf0
 800209e:	011b      	lsls	r3, r3, #4
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d008      	beq.n	80020b6 <HAL_SPI_Init+0xaa>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68da      	ldr	r2, [r3, #12]
 80020a8:	23e0      	movs	r3, #224	@ 0xe0
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d002      	beq.n	80020b6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	2382      	movs	r3, #130	@ 0x82
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	401a      	ands	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6899      	ldr	r1, [r3, #8]
 80020c4:	2384      	movs	r3, #132	@ 0x84
 80020c6:	021b      	lsls	r3, r3, #8
 80020c8:	400b      	ands	r3, r1
 80020ca:	431a      	orrs	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	2102      	movs	r1, #2
 80020d2:	400b      	ands	r3, r1
 80020d4:	431a      	orrs	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	2101      	movs	r1, #1
 80020dc:	400b      	ands	r3, r1
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6999      	ldr	r1, [r3, #24]
 80020e4:	2380      	movs	r3, #128	@ 0x80
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	400b      	ands	r3, r1
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	69db      	ldr	r3, [r3, #28]
 80020f0:	2138      	movs	r1, #56	@ 0x38
 80020f2:	400b      	ands	r3, r1
 80020f4:	431a      	orrs	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	2180      	movs	r1, #128	@ 0x80
 80020fc:	400b      	ands	r3, r1
 80020fe:	431a      	orrs	r2, r3
 8002100:	0011      	movs	r1, r2
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002106:	2380      	movs	r3, #128	@ 0x80
 8002108:	019b      	lsls	r3, r3, #6
 800210a:	401a      	ands	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	430a      	orrs	r2, r1
 8002112:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	0c1b      	lsrs	r3, r3, #16
 800211a:	2204      	movs	r2, #4
 800211c:	401a      	ands	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002122:	2110      	movs	r1, #16
 8002124:	400b      	ands	r3, r1
 8002126:	431a      	orrs	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800212c:	2108      	movs	r1, #8
 800212e:	400b      	ands	r3, r1
 8002130:	431a      	orrs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68d9      	ldr	r1, [r3, #12]
 8002136:	23f0      	movs	r3, #240	@ 0xf0
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	400b      	ands	r3, r1
 800213c:	431a      	orrs	r2, r3
 800213e:	0011      	movs	r1, r2
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	2380      	movs	r3, #128	@ 0x80
 8002144:	015b      	lsls	r3, r3, #5
 8002146:	401a      	ands	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	69da      	ldr	r2, [r3, #28]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4907      	ldr	r1, [pc, #28]	@ (8002178 <HAL_SPI_Init+0x16c>)
 800215c:	400a      	ands	r2, r1
 800215e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	225d      	movs	r2, #93	@ 0x5d
 800216a:	2101      	movs	r1, #1
 800216c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	0018      	movs	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	b004      	add	sp, #16
 8002176:	bd80      	pop	{r7, pc}
 8002178:	fffff7ff 	.word	0xfffff7ff

0800217c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e04a      	b.n	8002224 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	223d      	movs	r2, #61	@ 0x3d
 8002192:	5c9b      	ldrb	r3, [r3, r2]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d107      	bne.n	80021aa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	223c      	movs	r2, #60	@ 0x3c
 800219e:	2100      	movs	r1, #0
 80021a0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	0018      	movs	r0, r3
 80021a6:	f7fe fc85 	bl	8000ab4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	223d      	movs	r2, #61	@ 0x3d
 80021ae:	2102      	movs	r1, #2
 80021b0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3304      	adds	r3, #4
 80021ba:	0019      	movs	r1, r3
 80021bc:	0010      	movs	r0, r2
 80021be:	f000 fa6b 	bl	8002698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2248      	movs	r2, #72	@ 0x48
 80021c6:	2101      	movs	r1, #1
 80021c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	223e      	movs	r2, #62	@ 0x3e
 80021ce:	2101      	movs	r1, #1
 80021d0:	5499      	strb	r1, [r3, r2]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	223f      	movs	r2, #63	@ 0x3f
 80021d6:	2101      	movs	r1, #1
 80021d8:	5499      	strb	r1, [r3, r2]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2240      	movs	r2, #64	@ 0x40
 80021de:	2101      	movs	r1, #1
 80021e0:	5499      	strb	r1, [r3, r2]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2241      	movs	r2, #65	@ 0x41
 80021e6:	2101      	movs	r1, #1
 80021e8:	5499      	strb	r1, [r3, r2]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2242      	movs	r2, #66	@ 0x42
 80021ee:	2101      	movs	r1, #1
 80021f0:	5499      	strb	r1, [r3, r2]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2243      	movs	r2, #67	@ 0x43
 80021f6:	2101      	movs	r1, #1
 80021f8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2244      	movs	r2, #68	@ 0x44
 80021fe:	2101      	movs	r1, #1
 8002200:	5499      	strb	r1, [r3, r2]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2245      	movs	r2, #69	@ 0x45
 8002206:	2101      	movs	r1, #1
 8002208:	5499      	strb	r1, [r3, r2]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2246      	movs	r2, #70	@ 0x46
 800220e:	2101      	movs	r1, #1
 8002210:	5499      	strb	r1, [r3, r2]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2247      	movs	r2, #71	@ 0x47
 8002216:	2101      	movs	r1, #1
 8002218:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	223d      	movs	r2, #61	@ 0x3d
 800221e:	2101      	movs	r1, #1
 8002220:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	0018      	movs	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	b002      	add	sp, #8
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e04a      	b.n	80022d4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	223d      	movs	r2, #61	@ 0x3d
 8002242:	5c9b      	ldrb	r3, [r3, r2]
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d107      	bne.n	800225a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	223c      	movs	r2, #60	@ 0x3c
 800224e:	2100      	movs	r1, #0
 8002250:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	0018      	movs	r0, r3
 8002256:	f000 f841 	bl	80022dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	223d      	movs	r2, #61	@ 0x3d
 800225e:	2102      	movs	r1, #2
 8002260:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3304      	adds	r3, #4
 800226a:	0019      	movs	r1, r3
 800226c:	0010      	movs	r0, r2
 800226e:	f000 fa13 	bl	8002698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2248      	movs	r2, #72	@ 0x48
 8002276:	2101      	movs	r1, #1
 8002278:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	223e      	movs	r2, #62	@ 0x3e
 800227e:	2101      	movs	r1, #1
 8002280:	5499      	strb	r1, [r3, r2]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	223f      	movs	r2, #63	@ 0x3f
 8002286:	2101      	movs	r1, #1
 8002288:	5499      	strb	r1, [r3, r2]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2240      	movs	r2, #64	@ 0x40
 800228e:	2101      	movs	r1, #1
 8002290:	5499      	strb	r1, [r3, r2]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2241      	movs	r2, #65	@ 0x41
 8002296:	2101      	movs	r1, #1
 8002298:	5499      	strb	r1, [r3, r2]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2242      	movs	r2, #66	@ 0x42
 800229e:	2101      	movs	r1, #1
 80022a0:	5499      	strb	r1, [r3, r2]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2243      	movs	r2, #67	@ 0x43
 80022a6:	2101      	movs	r1, #1
 80022a8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2244      	movs	r2, #68	@ 0x44
 80022ae:	2101      	movs	r1, #1
 80022b0:	5499      	strb	r1, [r3, r2]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2245      	movs	r2, #69	@ 0x45
 80022b6:	2101      	movs	r1, #1
 80022b8:	5499      	strb	r1, [r3, r2]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2246      	movs	r2, #70	@ 0x46
 80022be:	2101      	movs	r1, #1
 80022c0:	5499      	strb	r1, [r3, r2]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2247      	movs	r2, #71	@ 0x47
 80022c6:	2101      	movs	r1, #1
 80022c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	223d      	movs	r2, #61	@ 0x3d
 80022ce:	2101      	movs	r1, #1
 80022d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	0018      	movs	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b002      	add	sp, #8
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80022e4:	46c0      	nop			@ (mov r8, r8)
 80022e6:	46bd      	mov	sp, r7
 80022e8:	b002      	add	sp, #8
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022f8:	2317      	movs	r3, #23
 80022fa:	18fb      	adds	r3, r7, r3
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	223c      	movs	r2, #60	@ 0x3c
 8002304:	5c9b      	ldrb	r3, [r3, r2]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d101      	bne.n	800230e <HAL_TIM_PWM_ConfigChannel+0x22>
 800230a:	2302      	movs	r3, #2
 800230c:	e0e5      	b.n	80024da <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	223c      	movs	r2, #60	@ 0x3c
 8002312:	2101      	movs	r1, #1
 8002314:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b14      	cmp	r3, #20
 800231a:	d900      	bls.n	800231e <HAL_TIM_PWM_ConfigChannel+0x32>
 800231c:	e0d1      	b.n	80024c2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	009a      	lsls	r2, r3, #2
 8002322:	4b70      	ldr	r3, [pc, #448]	@ (80024e4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002324:	18d3      	adds	r3, r2, r3
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	0011      	movs	r1, r2
 8002332:	0018      	movs	r0, r3
 8002334:	f000 fa3e 	bl	80027b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	699a      	ldr	r2, [r3, #24]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2108      	movs	r1, #8
 8002344:	430a      	orrs	r2, r1
 8002346:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	699a      	ldr	r2, [r3, #24]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2104      	movs	r1, #4
 8002354:	438a      	bics	r2, r1
 8002356:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6999      	ldr	r1, [r3, #24]
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	691a      	ldr	r2, [r3, #16]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	619a      	str	r2, [r3, #24]
      break;
 800236a:	e0af      	b.n	80024cc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	0011      	movs	r1, r2
 8002374:	0018      	movs	r0, r3
 8002376:	f000 faa7 	bl	80028c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	699a      	ldr	r2, [r3, #24]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2180      	movs	r1, #128	@ 0x80
 8002386:	0109      	lsls	r1, r1, #4
 8002388:	430a      	orrs	r2, r1
 800238a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699a      	ldr	r2, [r3, #24]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4954      	ldr	r1, [pc, #336]	@ (80024e8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002398:	400a      	ands	r2, r1
 800239a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6999      	ldr	r1, [r3, #24]
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	021a      	lsls	r2, r3, #8
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	619a      	str	r2, [r3, #24]
      break;
 80023b0:	e08c      	b.n	80024cc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	0011      	movs	r1, r2
 80023ba:	0018      	movs	r0, r3
 80023bc:	f000 fb08 	bl	80029d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	69da      	ldr	r2, [r3, #28]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2108      	movs	r1, #8
 80023cc:	430a      	orrs	r2, r1
 80023ce:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	69da      	ldr	r2, [r3, #28]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2104      	movs	r1, #4
 80023dc:	438a      	bics	r2, r1
 80023de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	69d9      	ldr	r1, [r3, #28]
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	691a      	ldr	r2, [r3, #16]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	61da      	str	r2, [r3, #28]
      break;
 80023f2:	e06b      	b.n	80024cc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	0011      	movs	r1, r2
 80023fc:	0018      	movs	r0, r3
 80023fe:	f000 fb6f 	bl	8002ae0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	69da      	ldr	r2, [r3, #28]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2180      	movs	r1, #128	@ 0x80
 800240e:	0109      	lsls	r1, r1, #4
 8002410:	430a      	orrs	r2, r1
 8002412:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	69da      	ldr	r2, [r3, #28]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4932      	ldr	r1, [pc, #200]	@ (80024e8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002420:	400a      	ands	r2, r1
 8002422:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	69d9      	ldr	r1, [r3, #28]
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	021a      	lsls	r2, r3, #8
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	430a      	orrs	r2, r1
 8002436:	61da      	str	r2, [r3, #28]
      break;
 8002438:	e048      	b.n	80024cc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	0011      	movs	r1, r2
 8002442:	0018      	movs	r0, r3
 8002444:	f000 fbb6 	bl	8002bb4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2108      	movs	r1, #8
 8002454:	430a      	orrs	r2, r1
 8002456:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2104      	movs	r1, #4
 8002464:	438a      	bics	r2, r1
 8002466:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	691a      	ldr	r2, [r3, #16]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800247a:	e027      	b.n	80024cc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	0011      	movs	r1, r2
 8002484:	0018      	movs	r0, r3
 8002486:	f000 fbf5 	bl	8002c74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2180      	movs	r1, #128	@ 0x80
 8002496:	0109      	lsls	r1, r1, #4
 8002498:	430a      	orrs	r2, r1
 800249a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4910      	ldr	r1, [pc, #64]	@ (80024e8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80024a8:	400a      	ands	r2, r1
 80024aa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	021a      	lsls	r2, r3, #8
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80024c0:	e004      	b.n	80024cc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80024c2:	2317      	movs	r3, #23
 80024c4:	18fb      	adds	r3, r7, r3
 80024c6:	2201      	movs	r2, #1
 80024c8:	701a      	strb	r2, [r3, #0]
      break;
 80024ca:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	223c      	movs	r2, #60	@ 0x3c
 80024d0:	2100      	movs	r1, #0
 80024d2:	5499      	strb	r1, [r3, r2]

  return status;
 80024d4:	2317      	movs	r3, #23
 80024d6:	18fb      	adds	r3, r7, r3
 80024d8:	781b      	ldrb	r3, [r3, #0]
}
 80024da:	0018      	movs	r0, r3
 80024dc:	46bd      	mov	sp, r7
 80024de:	b006      	add	sp, #24
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	46c0      	nop			@ (mov r8, r8)
 80024e4:	08003be8 	.word	0x08003be8
 80024e8:	fffffbff 	.word	0xfffffbff

080024ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024f6:	230f      	movs	r3, #15
 80024f8:	18fb      	adds	r3, r7, r3
 80024fa:	2200      	movs	r2, #0
 80024fc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	223c      	movs	r2, #60	@ 0x3c
 8002502:	5c9b      	ldrb	r3, [r3, r2]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d101      	bne.n	800250c <HAL_TIM_ConfigClockSource+0x20>
 8002508:	2302      	movs	r3, #2
 800250a:	e0bc      	b.n	8002686 <HAL_TIM_ConfigClockSource+0x19a>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	223c      	movs	r2, #60	@ 0x3c
 8002510:	2101      	movs	r1, #1
 8002512:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	223d      	movs	r2, #61	@ 0x3d
 8002518:	2102      	movs	r1, #2
 800251a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	4a5a      	ldr	r2, [pc, #360]	@ (8002690 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002528:	4013      	ands	r3, r2
 800252a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	4a59      	ldr	r2, [pc, #356]	@ (8002694 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002530:	4013      	ands	r3, r2
 8002532:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2280      	movs	r2, #128	@ 0x80
 8002542:	0192      	lsls	r2, r2, #6
 8002544:	4293      	cmp	r3, r2
 8002546:	d040      	beq.n	80025ca <HAL_TIM_ConfigClockSource+0xde>
 8002548:	2280      	movs	r2, #128	@ 0x80
 800254a:	0192      	lsls	r2, r2, #6
 800254c:	4293      	cmp	r3, r2
 800254e:	d900      	bls.n	8002552 <HAL_TIM_ConfigClockSource+0x66>
 8002550:	e088      	b.n	8002664 <HAL_TIM_ConfigClockSource+0x178>
 8002552:	2280      	movs	r2, #128	@ 0x80
 8002554:	0152      	lsls	r2, r2, #5
 8002556:	4293      	cmp	r3, r2
 8002558:	d100      	bne.n	800255c <HAL_TIM_ConfigClockSource+0x70>
 800255a:	e088      	b.n	800266e <HAL_TIM_ConfigClockSource+0x182>
 800255c:	2280      	movs	r2, #128	@ 0x80
 800255e:	0152      	lsls	r2, r2, #5
 8002560:	4293      	cmp	r3, r2
 8002562:	d900      	bls.n	8002566 <HAL_TIM_ConfigClockSource+0x7a>
 8002564:	e07e      	b.n	8002664 <HAL_TIM_ConfigClockSource+0x178>
 8002566:	2b70      	cmp	r3, #112	@ 0x70
 8002568:	d018      	beq.n	800259c <HAL_TIM_ConfigClockSource+0xb0>
 800256a:	d900      	bls.n	800256e <HAL_TIM_ConfigClockSource+0x82>
 800256c:	e07a      	b.n	8002664 <HAL_TIM_ConfigClockSource+0x178>
 800256e:	2b60      	cmp	r3, #96	@ 0x60
 8002570:	d04f      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0x126>
 8002572:	d900      	bls.n	8002576 <HAL_TIM_ConfigClockSource+0x8a>
 8002574:	e076      	b.n	8002664 <HAL_TIM_ConfigClockSource+0x178>
 8002576:	2b50      	cmp	r3, #80	@ 0x50
 8002578:	d03b      	beq.n	80025f2 <HAL_TIM_ConfigClockSource+0x106>
 800257a:	d900      	bls.n	800257e <HAL_TIM_ConfigClockSource+0x92>
 800257c:	e072      	b.n	8002664 <HAL_TIM_ConfigClockSource+0x178>
 800257e:	2b40      	cmp	r3, #64	@ 0x40
 8002580:	d057      	beq.n	8002632 <HAL_TIM_ConfigClockSource+0x146>
 8002582:	d900      	bls.n	8002586 <HAL_TIM_ConfigClockSource+0x9a>
 8002584:	e06e      	b.n	8002664 <HAL_TIM_ConfigClockSource+0x178>
 8002586:	2b30      	cmp	r3, #48	@ 0x30
 8002588:	d063      	beq.n	8002652 <HAL_TIM_ConfigClockSource+0x166>
 800258a:	d86b      	bhi.n	8002664 <HAL_TIM_ConfigClockSource+0x178>
 800258c:	2b20      	cmp	r3, #32
 800258e:	d060      	beq.n	8002652 <HAL_TIM_ConfigClockSource+0x166>
 8002590:	d868      	bhi.n	8002664 <HAL_TIM_ConfigClockSource+0x178>
 8002592:	2b00      	cmp	r3, #0
 8002594:	d05d      	beq.n	8002652 <HAL_TIM_ConfigClockSource+0x166>
 8002596:	2b10      	cmp	r3, #16
 8002598:	d05b      	beq.n	8002652 <HAL_TIM_ConfigClockSource+0x166>
 800259a:	e063      	b.n	8002664 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025ac:	f000 fc42 	bl	8002e34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	2277      	movs	r2, #119	@ 0x77
 80025bc:	4313      	orrs	r3, r2
 80025be:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	609a      	str	r2, [r3, #8]
      break;
 80025c8:	e052      	b.n	8002670 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025da:	f000 fc2b 	bl	8002e34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2180      	movs	r1, #128	@ 0x80
 80025ea:	01c9      	lsls	r1, r1, #7
 80025ec:	430a      	orrs	r2, r1
 80025ee:	609a      	str	r2, [r3, #8]
      break;
 80025f0:	e03e      	b.n	8002670 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025fe:	001a      	movs	r2, r3
 8002600:	f000 fb9c 	bl	8002d3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2150      	movs	r1, #80	@ 0x50
 800260a:	0018      	movs	r0, r3
 800260c:	f000 fbf6 	bl	8002dfc <TIM_ITRx_SetConfig>
      break;
 8002610:	e02e      	b.n	8002670 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800261e:	001a      	movs	r2, r3
 8002620:	f000 fbba 	bl	8002d98 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2160      	movs	r1, #96	@ 0x60
 800262a:	0018      	movs	r0, r3
 800262c:	f000 fbe6 	bl	8002dfc <TIM_ITRx_SetConfig>
      break;
 8002630:	e01e      	b.n	8002670 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800263e:	001a      	movs	r2, r3
 8002640:	f000 fb7c 	bl	8002d3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2140      	movs	r1, #64	@ 0x40
 800264a:	0018      	movs	r0, r3
 800264c:	f000 fbd6 	bl	8002dfc <TIM_ITRx_SetConfig>
      break;
 8002650:	e00e      	b.n	8002670 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	0019      	movs	r1, r3
 800265c:	0010      	movs	r0, r2
 800265e:	f000 fbcd 	bl	8002dfc <TIM_ITRx_SetConfig>
      break;
 8002662:	e005      	b.n	8002670 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002664:	230f      	movs	r3, #15
 8002666:	18fb      	adds	r3, r7, r3
 8002668:	2201      	movs	r2, #1
 800266a:	701a      	strb	r2, [r3, #0]
      break;
 800266c:	e000      	b.n	8002670 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800266e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	223d      	movs	r2, #61	@ 0x3d
 8002674:	2101      	movs	r1, #1
 8002676:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	223c      	movs	r2, #60	@ 0x3c
 800267c:	2100      	movs	r1, #0
 800267e:	5499      	strb	r1, [r3, r2]

  return status;
 8002680:	230f      	movs	r3, #15
 8002682:	18fb      	adds	r3, r7, r3
 8002684:	781b      	ldrb	r3, [r3, #0]
}
 8002686:	0018      	movs	r0, r3
 8002688:	46bd      	mov	sp, r7
 800268a:	b004      	add	sp, #16
 800268c:	bd80      	pop	{r7, pc}
 800268e:	46c0      	nop			@ (mov r8, r8)
 8002690:	ffceff88 	.word	0xffceff88
 8002694:	ffff00ff 	.word	0xffff00ff

08002698 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a3b      	ldr	r2, [pc, #236]	@ (8002798 <TIM_Base_SetConfig+0x100>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d008      	beq.n	80026c2 <TIM_Base_SetConfig+0x2a>
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	2380      	movs	r3, #128	@ 0x80
 80026b4:	05db      	lsls	r3, r3, #23
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d003      	beq.n	80026c2 <TIM_Base_SetConfig+0x2a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a37      	ldr	r2, [pc, #220]	@ (800279c <TIM_Base_SetConfig+0x104>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d108      	bne.n	80026d4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2270      	movs	r2, #112	@ 0x70
 80026c6:	4393      	bics	r3, r2
 80026c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a30      	ldr	r2, [pc, #192]	@ (8002798 <TIM_Base_SetConfig+0x100>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d018      	beq.n	800270e <TIM_Base_SetConfig+0x76>
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	2380      	movs	r3, #128	@ 0x80
 80026e0:	05db      	lsls	r3, r3, #23
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d013      	beq.n	800270e <TIM_Base_SetConfig+0x76>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a2c      	ldr	r2, [pc, #176]	@ (800279c <TIM_Base_SetConfig+0x104>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d00f      	beq.n	800270e <TIM_Base_SetConfig+0x76>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a2b      	ldr	r2, [pc, #172]	@ (80027a0 <TIM_Base_SetConfig+0x108>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d00b      	beq.n	800270e <TIM_Base_SetConfig+0x76>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a2a      	ldr	r2, [pc, #168]	@ (80027a4 <TIM_Base_SetConfig+0x10c>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d007      	beq.n	800270e <TIM_Base_SetConfig+0x76>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a29      	ldr	r2, [pc, #164]	@ (80027a8 <TIM_Base_SetConfig+0x110>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d003      	beq.n	800270e <TIM_Base_SetConfig+0x76>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a28      	ldr	r2, [pc, #160]	@ (80027ac <TIM_Base_SetConfig+0x114>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d108      	bne.n	8002720 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	4a27      	ldr	r2, [pc, #156]	@ (80027b0 <TIM_Base_SetConfig+0x118>)
 8002712:	4013      	ands	r3, r2
 8002714:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	4313      	orrs	r3, r2
 800271e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2280      	movs	r2, #128	@ 0x80
 8002724:	4393      	bics	r3, r2
 8002726:	001a      	movs	r2, r3
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	4313      	orrs	r3, r2
 800272e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a13      	ldr	r2, [pc, #76]	@ (8002798 <TIM_Base_SetConfig+0x100>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d00b      	beq.n	8002766 <TIM_Base_SetConfig+0xce>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a14      	ldr	r2, [pc, #80]	@ (80027a4 <TIM_Base_SetConfig+0x10c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d007      	beq.n	8002766 <TIM_Base_SetConfig+0xce>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a13      	ldr	r2, [pc, #76]	@ (80027a8 <TIM_Base_SetConfig+0x110>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d003      	beq.n	8002766 <TIM_Base_SetConfig+0xce>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a12      	ldr	r2, [pc, #72]	@ (80027ac <TIM_Base_SetConfig+0x114>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d103      	bne.n	800276e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	691a      	ldr	r2, [r3, #16]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	2201      	movs	r2, #1
 800277a:	4013      	ands	r3, r2
 800277c:	2b01      	cmp	r3, #1
 800277e:	d106      	bne.n	800278e <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	2201      	movs	r2, #1
 8002786:	4393      	bics	r3, r2
 8002788:	001a      	movs	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	611a      	str	r2, [r3, #16]
  }
}
 800278e:	46c0      	nop			@ (mov r8, r8)
 8002790:	46bd      	mov	sp, r7
 8002792:	b004      	add	sp, #16
 8002794:	bd80      	pop	{r7, pc}
 8002796:	46c0      	nop			@ (mov r8, r8)
 8002798:	40012c00 	.word	0x40012c00
 800279c:	40000400 	.word	0x40000400
 80027a0:	40002000 	.word	0x40002000
 80027a4:	40014000 	.word	0x40014000
 80027a8:	40014400 	.word	0x40014400
 80027ac:	40014800 	.word	0x40014800
 80027b0:	fffffcff 	.word	0xfffffcff

080027b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	2201      	movs	r2, #1
 80027ca:	4393      	bics	r3, r2
 80027cc:	001a      	movs	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	4a32      	ldr	r2, [pc, #200]	@ (80028ac <TIM_OC1_SetConfig+0xf8>)
 80027e2:	4013      	ands	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2203      	movs	r2, #3
 80027ea:	4393      	bics	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	2202      	movs	r2, #2
 80027fc:	4393      	bics	r3, r2
 80027fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	4313      	orrs	r3, r2
 8002808:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a28      	ldr	r2, [pc, #160]	@ (80028b0 <TIM_OC1_SetConfig+0xfc>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d00b      	beq.n	800282a <TIM_OC1_SetConfig+0x76>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a27      	ldr	r2, [pc, #156]	@ (80028b4 <TIM_OC1_SetConfig+0x100>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d007      	beq.n	800282a <TIM_OC1_SetConfig+0x76>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a26      	ldr	r2, [pc, #152]	@ (80028b8 <TIM_OC1_SetConfig+0x104>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d003      	beq.n	800282a <TIM_OC1_SetConfig+0x76>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a25      	ldr	r2, [pc, #148]	@ (80028bc <TIM_OC1_SetConfig+0x108>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d10c      	bne.n	8002844 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	2208      	movs	r2, #8
 800282e:	4393      	bics	r3, r2
 8002830:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	4313      	orrs	r3, r2
 800283a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	2204      	movs	r2, #4
 8002840:	4393      	bics	r3, r2
 8002842:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a1a      	ldr	r2, [pc, #104]	@ (80028b0 <TIM_OC1_SetConfig+0xfc>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d00b      	beq.n	8002864 <TIM_OC1_SetConfig+0xb0>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a19      	ldr	r2, [pc, #100]	@ (80028b4 <TIM_OC1_SetConfig+0x100>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d007      	beq.n	8002864 <TIM_OC1_SetConfig+0xb0>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a18      	ldr	r2, [pc, #96]	@ (80028b8 <TIM_OC1_SetConfig+0x104>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d003      	beq.n	8002864 <TIM_OC1_SetConfig+0xb0>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a17      	ldr	r2, [pc, #92]	@ (80028bc <TIM_OC1_SetConfig+0x108>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d111      	bne.n	8002888 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	4a16      	ldr	r2, [pc, #88]	@ (80028c0 <TIM_OC1_SetConfig+0x10c>)
 8002868:	4013      	ands	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	4a15      	ldr	r2, [pc, #84]	@ (80028c4 <TIM_OC1_SetConfig+0x110>)
 8002870:	4013      	ands	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	4313      	orrs	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	621a      	str	r2, [r3, #32]
}
 80028a2:	46c0      	nop			@ (mov r8, r8)
 80028a4:	46bd      	mov	sp, r7
 80028a6:	b006      	add	sp, #24
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	46c0      	nop			@ (mov r8, r8)
 80028ac:	fffeff8f 	.word	0xfffeff8f
 80028b0:	40012c00 	.word	0x40012c00
 80028b4:	40014000 	.word	0x40014000
 80028b8:	40014400 	.word	0x40014400
 80028bc:	40014800 	.word	0x40014800
 80028c0:	fffffeff 	.word	0xfffffeff
 80028c4:	fffffdff 	.word	0xfffffdff

080028c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	2210      	movs	r2, #16
 80028de:	4393      	bics	r3, r2
 80028e0:	001a      	movs	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	4a2e      	ldr	r2, [pc, #184]	@ (80029b0 <TIM_OC2_SetConfig+0xe8>)
 80028f6:	4013      	ands	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	4a2d      	ldr	r2, [pc, #180]	@ (80029b4 <TIM_OC2_SetConfig+0xec>)
 80028fe:	4013      	ands	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	021b      	lsls	r3, r3, #8
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	4313      	orrs	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	2220      	movs	r2, #32
 8002912:	4393      	bics	r3, r2
 8002914:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	4313      	orrs	r3, r2
 8002920:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a24      	ldr	r2, [pc, #144]	@ (80029b8 <TIM_OC2_SetConfig+0xf0>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d10d      	bne.n	8002946 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2280      	movs	r2, #128	@ 0x80
 800292e:	4393      	bics	r3, r2
 8002930:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	4313      	orrs	r3, r2
 800293c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2240      	movs	r2, #64	@ 0x40
 8002942:	4393      	bics	r3, r2
 8002944:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a1b      	ldr	r2, [pc, #108]	@ (80029b8 <TIM_OC2_SetConfig+0xf0>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d00b      	beq.n	8002966 <TIM_OC2_SetConfig+0x9e>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a1a      	ldr	r2, [pc, #104]	@ (80029bc <TIM_OC2_SetConfig+0xf4>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d007      	beq.n	8002966 <TIM_OC2_SetConfig+0x9e>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a19      	ldr	r2, [pc, #100]	@ (80029c0 <TIM_OC2_SetConfig+0xf8>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d003      	beq.n	8002966 <TIM_OC2_SetConfig+0x9e>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a18      	ldr	r2, [pc, #96]	@ (80029c4 <TIM_OC2_SetConfig+0xfc>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d113      	bne.n	800298e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	4a17      	ldr	r2, [pc, #92]	@ (80029c8 <TIM_OC2_SetConfig+0x100>)
 800296a:	4013      	ands	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4a16      	ldr	r2, [pc, #88]	@ (80029cc <TIM_OC2_SetConfig+0x104>)
 8002972:	4013      	ands	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4313      	orrs	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	4313      	orrs	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	621a      	str	r2, [r3, #32]
}
 80029a8:	46c0      	nop			@ (mov r8, r8)
 80029aa:	46bd      	mov	sp, r7
 80029ac:	b006      	add	sp, #24
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	feff8fff 	.word	0xfeff8fff
 80029b4:	fffffcff 	.word	0xfffffcff
 80029b8:	40012c00 	.word	0x40012c00
 80029bc:	40014000 	.word	0x40014000
 80029c0:	40014400 	.word	0x40014400
 80029c4:	40014800 	.word	0x40014800
 80029c8:	fffffbff 	.word	0xfffffbff
 80029cc:	fffff7ff 	.word	0xfffff7ff

080029d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	4a33      	ldr	r2, [pc, #204]	@ (8002ab4 <TIM_OC3_SetConfig+0xe4>)
 80029e6:	401a      	ands	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4a2f      	ldr	r2, [pc, #188]	@ (8002ab8 <TIM_OC3_SetConfig+0xe8>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2203      	movs	r2, #3
 8002a04:	4393      	bics	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	4a29      	ldr	r2, [pc, #164]	@ (8002abc <TIM_OC3_SetConfig+0xec>)
 8002a16:	4013      	ands	r3, r2
 8002a18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	021b      	lsls	r3, r3, #8
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a25      	ldr	r2, [pc, #148]	@ (8002ac0 <TIM_OC3_SetConfig+0xf0>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d10d      	bne.n	8002a4a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	4a24      	ldr	r2, [pc, #144]	@ (8002ac4 <TIM_OC3_SetConfig+0xf4>)
 8002a32:	4013      	ands	r3, r2
 8002a34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	021b      	lsls	r3, r3, #8
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	4a20      	ldr	r2, [pc, #128]	@ (8002ac8 <TIM_OC3_SetConfig+0xf8>)
 8002a46:	4013      	ands	r3, r2
 8002a48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ac0 <TIM_OC3_SetConfig+0xf0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d00b      	beq.n	8002a6a <TIM_OC3_SetConfig+0x9a>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a1d      	ldr	r2, [pc, #116]	@ (8002acc <TIM_OC3_SetConfig+0xfc>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d007      	beq.n	8002a6a <TIM_OC3_SetConfig+0x9a>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ad0 <TIM_OC3_SetConfig+0x100>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d003      	beq.n	8002a6a <TIM_OC3_SetConfig+0x9a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a1b      	ldr	r2, [pc, #108]	@ (8002ad4 <TIM_OC3_SetConfig+0x104>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d113      	bne.n	8002a92 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	4a1a      	ldr	r2, [pc, #104]	@ (8002ad8 <TIM_OC3_SetConfig+0x108>)
 8002a6e:	4013      	ands	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4a19      	ldr	r2, [pc, #100]	@ (8002adc <TIM_OC3_SetConfig+0x10c>)
 8002a76:	4013      	ands	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	011b      	lsls	r3, r3, #4
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	621a      	str	r2, [r3, #32]
}
 8002aac:	46c0      	nop			@ (mov r8, r8)
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	b006      	add	sp, #24
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	fffffeff 	.word	0xfffffeff
 8002ab8:	fffeff8f 	.word	0xfffeff8f
 8002abc:	fffffdff 	.word	0xfffffdff
 8002ac0:	40012c00 	.word	0x40012c00
 8002ac4:	fffff7ff 	.word	0xfffff7ff
 8002ac8:	fffffbff 	.word	0xfffffbff
 8002acc:	40014000 	.word	0x40014000
 8002ad0:	40014400 	.word	0x40014400
 8002ad4:	40014800 	.word	0x40014800
 8002ad8:	ffffefff 	.word	0xffffefff
 8002adc:	ffffdfff 	.word	0xffffdfff

08002ae0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	4a26      	ldr	r2, [pc, #152]	@ (8002b90 <TIM_OC4_SetConfig+0xb0>)
 8002af6:	401a      	ands	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4a22      	ldr	r2, [pc, #136]	@ (8002b94 <TIM_OC4_SetConfig+0xb4>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4a21      	ldr	r2, [pc, #132]	@ (8002b98 <TIM_OC4_SetConfig+0xb8>)
 8002b14:	4013      	ands	r3, r2
 8002b16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	021b      	lsls	r3, r3, #8
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	4a1d      	ldr	r2, [pc, #116]	@ (8002b9c <TIM_OC4_SetConfig+0xbc>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	031b      	lsls	r3, r3, #12
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a19      	ldr	r2, [pc, #100]	@ (8002ba0 <TIM_OC4_SetConfig+0xc0>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d00b      	beq.n	8002b58 <TIM_OC4_SetConfig+0x78>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a18      	ldr	r2, [pc, #96]	@ (8002ba4 <TIM_OC4_SetConfig+0xc4>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d007      	beq.n	8002b58 <TIM_OC4_SetConfig+0x78>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a17      	ldr	r2, [pc, #92]	@ (8002ba8 <TIM_OC4_SetConfig+0xc8>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d003      	beq.n	8002b58 <TIM_OC4_SetConfig+0x78>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a16      	ldr	r2, [pc, #88]	@ (8002bac <TIM_OC4_SetConfig+0xcc>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d109      	bne.n	8002b6c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	4a15      	ldr	r2, [pc, #84]	@ (8002bb0 <TIM_OC4_SetConfig+0xd0>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	019b      	lsls	r3, r3, #6
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	621a      	str	r2, [r3, #32]
}
 8002b86:	46c0      	nop			@ (mov r8, r8)
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	b006      	add	sp, #24
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	46c0      	nop			@ (mov r8, r8)
 8002b90:	ffffefff 	.word	0xffffefff
 8002b94:	feff8fff 	.word	0xfeff8fff
 8002b98:	fffffcff 	.word	0xfffffcff
 8002b9c:	ffffdfff 	.word	0xffffdfff
 8002ba0:	40012c00 	.word	0x40012c00
 8002ba4:	40014000 	.word	0x40014000
 8002ba8:	40014400 	.word	0x40014400
 8002bac:	40014800 	.word	0x40014800
 8002bb0:	ffffbfff 	.word	0xffffbfff

08002bb4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	4a23      	ldr	r2, [pc, #140]	@ (8002c58 <TIM_OC5_SetConfig+0xa4>)
 8002bca:	401a      	ands	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	4a1f      	ldr	r2, [pc, #124]	@ (8002c5c <TIM_OC5_SetConfig+0xa8>)
 8002be0:	4013      	ands	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	4a1b      	ldr	r2, [pc, #108]	@ (8002c60 <TIM_OC5_SetConfig+0xac>)
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	041b      	lsls	r3, r3, #16
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a17      	ldr	r2, [pc, #92]	@ (8002c64 <TIM_OC5_SetConfig+0xb0>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d00b      	beq.n	8002c22 <TIM_OC5_SetConfig+0x6e>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a16      	ldr	r2, [pc, #88]	@ (8002c68 <TIM_OC5_SetConfig+0xb4>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d007      	beq.n	8002c22 <TIM_OC5_SetConfig+0x6e>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a15      	ldr	r2, [pc, #84]	@ (8002c6c <TIM_OC5_SetConfig+0xb8>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d003      	beq.n	8002c22 <TIM_OC5_SetConfig+0x6e>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a14      	ldr	r2, [pc, #80]	@ (8002c70 <TIM_OC5_SetConfig+0xbc>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d109      	bne.n	8002c36 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	4a0c      	ldr	r2, [pc, #48]	@ (8002c58 <TIM_OC5_SetConfig+0xa4>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	021b      	lsls	r3, r3, #8
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	621a      	str	r2, [r3, #32]
}
 8002c50:	46c0      	nop			@ (mov r8, r8)
 8002c52:	46bd      	mov	sp, r7
 8002c54:	b006      	add	sp, #24
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	fffeffff 	.word	0xfffeffff
 8002c5c:	fffeff8f 	.word	0xfffeff8f
 8002c60:	fffdffff 	.word	0xfffdffff
 8002c64:	40012c00 	.word	0x40012c00
 8002c68:	40014000 	.word	0x40014000
 8002c6c:	40014400 	.word	0x40014400
 8002c70:	40014800 	.word	0x40014800

08002c74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	4a24      	ldr	r2, [pc, #144]	@ (8002d1c <TIM_OC6_SetConfig+0xa8>)
 8002c8a:	401a      	ands	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4a20      	ldr	r2, [pc, #128]	@ (8002d20 <TIM_OC6_SetConfig+0xac>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	021b      	lsls	r3, r3, #8
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4a1c      	ldr	r2, [pc, #112]	@ (8002d24 <TIM_OC6_SetConfig+0xb0>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	051b      	lsls	r3, r3, #20
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a18      	ldr	r2, [pc, #96]	@ (8002d28 <TIM_OC6_SetConfig+0xb4>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d00b      	beq.n	8002ce4 <TIM_OC6_SetConfig+0x70>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a17      	ldr	r2, [pc, #92]	@ (8002d2c <TIM_OC6_SetConfig+0xb8>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d007      	beq.n	8002ce4 <TIM_OC6_SetConfig+0x70>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a16      	ldr	r2, [pc, #88]	@ (8002d30 <TIM_OC6_SetConfig+0xbc>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d003      	beq.n	8002ce4 <TIM_OC6_SetConfig+0x70>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a15      	ldr	r2, [pc, #84]	@ (8002d34 <TIM_OC6_SetConfig+0xc0>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d109      	bne.n	8002cf8 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	4a14      	ldr	r2, [pc, #80]	@ (8002d38 <TIM_OC6_SetConfig+0xc4>)
 8002ce8:	4013      	ands	r3, r2
 8002cea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	029b      	lsls	r3, r3, #10
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	621a      	str	r2, [r3, #32]
}
 8002d12:	46c0      	nop			@ (mov r8, r8)
 8002d14:	46bd      	mov	sp, r7
 8002d16:	b006      	add	sp, #24
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	46c0      	nop			@ (mov r8, r8)
 8002d1c:	ffefffff 	.word	0xffefffff
 8002d20:	feff8fff 	.word	0xfeff8fff
 8002d24:	ffdfffff 	.word	0xffdfffff
 8002d28:	40012c00 	.word	0x40012c00
 8002d2c:	40014000 	.word	0x40014000
 8002d30:	40014400 	.word	0x40014400
 8002d34:	40014800 	.word	0x40014800
 8002d38:	fffbffff 	.word	0xfffbffff

08002d3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	2201      	movs	r2, #1
 8002d54:	4393      	bics	r3, r2
 8002d56:	001a      	movs	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	22f0      	movs	r2, #240	@ 0xf0
 8002d66:	4393      	bics	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	220a      	movs	r2, #10
 8002d78:	4393      	bics	r3, r2
 8002d7a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	621a      	str	r2, [r3, #32]
}
 8002d90:	46c0      	nop			@ (mov r8, r8)
 8002d92:	46bd      	mov	sp, r7
 8002d94:	b006      	add	sp, #24
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	2210      	movs	r2, #16
 8002db0:	4393      	bics	r3, r2
 8002db2:	001a      	movs	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	4a0d      	ldr	r2, [pc, #52]	@ (8002df8 <TIM_TI2_ConfigInputStage+0x60>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	031b      	lsls	r3, r3, #12
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	22a0      	movs	r2, #160	@ 0xa0
 8002dd4:	4393      	bics	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	621a      	str	r2, [r3, #32]
}
 8002dee:	46c0      	nop			@ (mov r8, r8)
 8002df0:	46bd      	mov	sp, r7
 8002df2:	b006      	add	sp, #24
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	46c0      	nop			@ (mov r8, r8)
 8002df8:	ffff0fff 	.word	0xffff0fff

08002dfc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4a08      	ldr	r2, [pc, #32]	@ (8002e30 <TIM_ITRx_SetConfig+0x34>)
 8002e10:	4013      	ands	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	2207      	movs	r2, #7
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	609a      	str	r2, [r3, #8]
}
 8002e26:	46c0      	nop			@ (mov r8, r8)
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	b004      	add	sp, #16
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	46c0      	nop			@ (mov r8, r8)
 8002e30:	ffcfff8f 	.word	0xffcfff8f

08002e34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
 8002e40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	4a09      	ldr	r2, [pc, #36]	@ (8002e70 <TIM_ETR_SetConfig+0x3c>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	021a      	lsls	r2, r3, #8
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	431a      	orrs	r2, r3
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	609a      	str	r2, [r3, #8]
}
 8002e68:	46c0      	nop			@ (mov r8, r8)
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	b006      	add	sp, #24
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	ffff00ff 	.word	0xffff00ff

08002e74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	223c      	movs	r2, #60	@ 0x3c
 8002e82:	5c9b      	ldrb	r3, [r3, r2]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d101      	bne.n	8002e8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	e055      	b.n	8002f38 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	223c      	movs	r2, #60	@ 0x3c
 8002e90:	2101      	movs	r1, #1
 8002e92:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	223d      	movs	r2, #61	@ 0x3d
 8002e98:	2102      	movs	r1, #2
 8002e9a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a23      	ldr	r2, [pc, #140]	@ (8002f40 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d108      	bne.n	8002ec8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	4a22      	ldr	r2, [pc, #136]	@ (8002f44 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002eba:	4013      	ands	r3, r2
 8002ebc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2270      	movs	r2, #112	@ 0x70
 8002ecc:	4393      	bics	r3, r2
 8002ece:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a16      	ldr	r2, [pc, #88]	@ (8002f40 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d00f      	beq.n	8002f0c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	2380      	movs	r3, #128	@ 0x80
 8002ef2:	05db      	lsls	r3, r3, #23
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d009      	beq.n	8002f0c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a12      	ldr	r2, [pc, #72]	@ (8002f48 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d004      	beq.n	8002f0c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a11      	ldr	r2, [pc, #68]	@ (8002f4c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d10c      	bne.n	8002f26 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	2280      	movs	r2, #128	@ 0x80
 8002f10:	4393      	bics	r3, r2
 8002f12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	223d      	movs	r2, #61	@ 0x3d
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	223c      	movs	r2, #60	@ 0x3c
 8002f32:	2100      	movs	r1, #0
 8002f34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	0018      	movs	r0, r3
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	b004      	add	sp, #16
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40012c00 	.word	0x40012c00
 8002f44:	ff0fffff 	.word	0xff0fffff
 8002f48:	40000400 	.word	0x40000400
 8002f4c:	40014000 	.word	0x40014000

08002f50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	223c      	movs	r2, #60	@ 0x3c
 8002f62:	5c9b      	ldrb	r3, [r3, r2]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d101      	bne.n	8002f6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	e06f      	b.n	800304c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	223c      	movs	r2, #60	@ 0x3c
 8002f70:	2101      	movs	r1, #1
 8002f72:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	22ff      	movs	r2, #255	@ 0xff
 8002f78:	4393      	bics	r3, r2
 8002f7a:	001a      	movs	r2, r3
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4a33      	ldr	r2, [pc, #204]	@ (8003054 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8002f88:	401a      	ands	r2, r3
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	4a30      	ldr	r2, [pc, #192]	@ (8003058 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8002f96:	401a      	ands	r2, r3
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4a2e      	ldr	r2, [pc, #184]	@ (800305c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8002fa4:	401a      	ands	r2, r3
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	4a2b      	ldr	r2, [pc, #172]	@ (8003060 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8002fb2:	401a      	ands	r2, r3
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	4a29      	ldr	r2, [pc, #164]	@ (8003064 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8002fc0:	401a      	ands	r2, r3
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	4a26      	ldr	r2, [pc, #152]	@ (8003068 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8002fce:	401a      	ands	r2, r3
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	4a24      	ldr	r2, [pc, #144]	@ (800306c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8002fdc:	401a      	ands	r2, r3
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	041b      	lsls	r3, r3, #16
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	4a21      	ldr	r2, [pc, #132]	@ (8003070 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8002fec:	401a      	ands	r2, r3
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a1e      	ldr	r2, [pc, #120]	@ (8003074 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d11c      	bne.n	800303a <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4a1d      	ldr	r2, [pc, #116]	@ (8003078 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003004:	401a      	ands	r2, r3
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300a:	051b      	lsls	r3, r3, #20
 800300c:	4313      	orrs	r3, r2
 800300e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4a1a      	ldr	r2, [pc, #104]	@ (800307c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003014:	401a      	ands	r2, r3
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	4313      	orrs	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	4a17      	ldr	r2, [pc, #92]	@ (8003080 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003022:	401a      	ands	r2, r3
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003028:	4313      	orrs	r3, r2
 800302a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4a15      	ldr	r2, [pc, #84]	@ (8003084 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003030:	401a      	ands	r2, r3
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003036:	4313      	orrs	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	223c      	movs	r2, #60	@ 0x3c
 8003046:	2100      	movs	r1, #0
 8003048:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	0018      	movs	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	b004      	add	sp, #16
 8003052:	bd80      	pop	{r7, pc}
 8003054:	fffffcff 	.word	0xfffffcff
 8003058:	fffffbff 	.word	0xfffffbff
 800305c:	fffff7ff 	.word	0xfffff7ff
 8003060:	ffffefff 	.word	0xffffefff
 8003064:	ffffdfff 	.word	0xffffdfff
 8003068:	ffffbfff 	.word	0xffffbfff
 800306c:	fff0ffff 	.word	0xfff0ffff
 8003070:	efffffff 	.word	0xefffffff
 8003074:	40012c00 	.word	0x40012c00
 8003078:	ff0fffff 	.word	0xff0fffff
 800307c:	feffffff 	.word	0xfeffffff
 8003080:	fdffffff 	.word	0xfdffffff
 8003084:	dfffffff 	.word	0xdfffffff

08003088 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e046      	b.n	8003128 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2288      	movs	r2, #136	@ 0x88
 800309e:	589b      	ldr	r3, [r3, r2]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d107      	bne.n	80030b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2284      	movs	r2, #132	@ 0x84
 80030a8:	2100      	movs	r1, #0
 80030aa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	0018      	movs	r0, r3
 80030b0:	f7fd fd74 	bl	8000b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2288      	movs	r2, #136	@ 0x88
 80030b8:	2124      	movs	r1, #36	@ 0x24
 80030ba:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2101      	movs	r1, #1
 80030c8:	438a      	bics	r2, r1
 80030ca:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d003      	beq.n	80030dc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	0018      	movs	r0, r3
 80030d8:	f000 faea 	bl	80036b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	0018      	movs	r0, r3
 80030e0:	f000 f828 	bl	8003134 <UART_SetConfig>
 80030e4:	0003      	movs	r3, r0
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d101      	bne.n	80030ee <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e01c      	b.n	8003128 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	490d      	ldr	r1, [pc, #52]	@ (8003130 <HAL_UART_Init+0xa8>)
 80030fa:	400a      	ands	r2, r1
 80030fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	212a      	movs	r1, #42	@ 0x2a
 800310a:	438a      	bics	r2, r1
 800310c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2101      	movs	r1, #1
 800311a:	430a      	orrs	r2, r1
 800311c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	0018      	movs	r0, r3
 8003122:	f000 fb79 	bl	8003818 <UART_CheckIdleState>
 8003126:	0003      	movs	r3, r0
}
 8003128:	0018      	movs	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	b002      	add	sp, #8
 800312e:	bd80      	pop	{r7, pc}
 8003130:	ffffb7ff 	.word	0xffffb7ff

08003134 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003134:	b5b0      	push	{r4, r5, r7, lr}
 8003136:	b090      	sub	sp, #64	@ 0x40
 8003138:	af00      	add	r7, sp, #0
 800313a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800313c:	231a      	movs	r3, #26
 800313e:	2220      	movs	r2, #32
 8003140:	189b      	adds	r3, r3, r2
 8003142:	19db      	adds	r3, r3, r7
 8003144:	2200      	movs	r2, #0
 8003146:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	431a      	orrs	r2, r3
 8003152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	431a      	orrs	r2, r3
 8003158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315a:	69db      	ldr	r3, [r3, #28]
 800315c:	4313      	orrs	r3, r2
 800315e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4aaf      	ldr	r2, [pc, #700]	@ (8003424 <UART_SetConfig+0x2f0>)
 8003168:	4013      	ands	r3, r2
 800316a:	0019      	movs	r1, r3
 800316c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003172:	430b      	orrs	r3, r1
 8003174:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	4aaa      	ldr	r2, [pc, #680]	@ (8003428 <UART_SetConfig+0x2f4>)
 800317e:	4013      	ands	r3, r2
 8003180:	0018      	movs	r0, r3
 8003182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003184:	68d9      	ldr	r1, [r3, #12]
 8003186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	0003      	movs	r3, r0
 800318c:	430b      	orrs	r3, r1
 800318e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4aa4      	ldr	r2, [pc, #656]	@ (800342c <UART_SetConfig+0x2f8>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d004      	beq.n	80031aa <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80031a6:	4313      	orrs	r3, r2
 80031a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	4a9f      	ldr	r2, [pc, #636]	@ (8003430 <UART_SetConfig+0x2fc>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	0019      	movs	r1, r3
 80031b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031bc:	430b      	orrs	r3, r1
 80031be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80031c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c6:	220f      	movs	r2, #15
 80031c8:	4393      	bics	r3, r2
 80031ca:	0018      	movs	r0, r3
 80031cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ce:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80031d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	0003      	movs	r3, r0
 80031d6:	430b      	orrs	r3, r1
 80031d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a95      	ldr	r2, [pc, #596]	@ (8003434 <UART_SetConfig+0x300>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d131      	bne.n	8003248 <UART_SetConfig+0x114>
 80031e4:	4b94      	ldr	r3, [pc, #592]	@ (8003438 <UART_SetConfig+0x304>)
 80031e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e8:	2203      	movs	r2, #3
 80031ea:	4013      	ands	r3, r2
 80031ec:	2b03      	cmp	r3, #3
 80031ee:	d01d      	beq.n	800322c <UART_SetConfig+0xf8>
 80031f0:	d823      	bhi.n	800323a <UART_SetConfig+0x106>
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d00c      	beq.n	8003210 <UART_SetConfig+0xdc>
 80031f6:	d820      	bhi.n	800323a <UART_SetConfig+0x106>
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d002      	beq.n	8003202 <UART_SetConfig+0xce>
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d00e      	beq.n	800321e <UART_SetConfig+0xea>
 8003200:	e01b      	b.n	800323a <UART_SetConfig+0x106>
 8003202:	231b      	movs	r3, #27
 8003204:	2220      	movs	r2, #32
 8003206:	189b      	adds	r3, r3, r2
 8003208:	19db      	adds	r3, r3, r7
 800320a:	2200      	movs	r2, #0
 800320c:	701a      	strb	r2, [r3, #0]
 800320e:	e0b4      	b.n	800337a <UART_SetConfig+0x246>
 8003210:	231b      	movs	r3, #27
 8003212:	2220      	movs	r2, #32
 8003214:	189b      	adds	r3, r3, r2
 8003216:	19db      	adds	r3, r3, r7
 8003218:	2202      	movs	r2, #2
 800321a:	701a      	strb	r2, [r3, #0]
 800321c:	e0ad      	b.n	800337a <UART_SetConfig+0x246>
 800321e:	231b      	movs	r3, #27
 8003220:	2220      	movs	r2, #32
 8003222:	189b      	adds	r3, r3, r2
 8003224:	19db      	adds	r3, r3, r7
 8003226:	2204      	movs	r2, #4
 8003228:	701a      	strb	r2, [r3, #0]
 800322a:	e0a6      	b.n	800337a <UART_SetConfig+0x246>
 800322c:	231b      	movs	r3, #27
 800322e:	2220      	movs	r2, #32
 8003230:	189b      	adds	r3, r3, r2
 8003232:	19db      	adds	r3, r3, r7
 8003234:	2208      	movs	r2, #8
 8003236:	701a      	strb	r2, [r3, #0]
 8003238:	e09f      	b.n	800337a <UART_SetConfig+0x246>
 800323a:	231b      	movs	r3, #27
 800323c:	2220      	movs	r2, #32
 800323e:	189b      	adds	r3, r3, r2
 8003240:	19db      	adds	r3, r3, r7
 8003242:	2210      	movs	r2, #16
 8003244:	701a      	strb	r2, [r3, #0]
 8003246:	e098      	b.n	800337a <UART_SetConfig+0x246>
 8003248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a7b      	ldr	r2, [pc, #492]	@ (800343c <UART_SetConfig+0x308>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d131      	bne.n	80032b6 <UART_SetConfig+0x182>
 8003252:	4b79      	ldr	r3, [pc, #484]	@ (8003438 <UART_SetConfig+0x304>)
 8003254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003256:	220c      	movs	r2, #12
 8003258:	4013      	ands	r3, r2
 800325a:	2b0c      	cmp	r3, #12
 800325c:	d01d      	beq.n	800329a <UART_SetConfig+0x166>
 800325e:	d823      	bhi.n	80032a8 <UART_SetConfig+0x174>
 8003260:	2b08      	cmp	r3, #8
 8003262:	d00c      	beq.n	800327e <UART_SetConfig+0x14a>
 8003264:	d820      	bhi.n	80032a8 <UART_SetConfig+0x174>
 8003266:	2b00      	cmp	r3, #0
 8003268:	d002      	beq.n	8003270 <UART_SetConfig+0x13c>
 800326a:	2b04      	cmp	r3, #4
 800326c:	d00e      	beq.n	800328c <UART_SetConfig+0x158>
 800326e:	e01b      	b.n	80032a8 <UART_SetConfig+0x174>
 8003270:	231b      	movs	r3, #27
 8003272:	2220      	movs	r2, #32
 8003274:	189b      	adds	r3, r3, r2
 8003276:	19db      	adds	r3, r3, r7
 8003278:	2200      	movs	r2, #0
 800327a:	701a      	strb	r2, [r3, #0]
 800327c:	e07d      	b.n	800337a <UART_SetConfig+0x246>
 800327e:	231b      	movs	r3, #27
 8003280:	2220      	movs	r2, #32
 8003282:	189b      	adds	r3, r3, r2
 8003284:	19db      	adds	r3, r3, r7
 8003286:	2202      	movs	r2, #2
 8003288:	701a      	strb	r2, [r3, #0]
 800328a:	e076      	b.n	800337a <UART_SetConfig+0x246>
 800328c:	231b      	movs	r3, #27
 800328e:	2220      	movs	r2, #32
 8003290:	189b      	adds	r3, r3, r2
 8003292:	19db      	adds	r3, r3, r7
 8003294:	2204      	movs	r2, #4
 8003296:	701a      	strb	r2, [r3, #0]
 8003298:	e06f      	b.n	800337a <UART_SetConfig+0x246>
 800329a:	231b      	movs	r3, #27
 800329c:	2220      	movs	r2, #32
 800329e:	189b      	adds	r3, r3, r2
 80032a0:	19db      	adds	r3, r3, r7
 80032a2:	2208      	movs	r2, #8
 80032a4:	701a      	strb	r2, [r3, #0]
 80032a6:	e068      	b.n	800337a <UART_SetConfig+0x246>
 80032a8:	231b      	movs	r3, #27
 80032aa:	2220      	movs	r2, #32
 80032ac:	189b      	adds	r3, r3, r2
 80032ae:	19db      	adds	r3, r3, r7
 80032b0:	2210      	movs	r2, #16
 80032b2:	701a      	strb	r2, [r3, #0]
 80032b4:	e061      	b.n	800337a <UART_SetConfig+0x246>
 80032b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a61      	ldr	r2, [pc, #388]	@ (8003440 <UART_SetConfig+0x30c>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d106      	bne.n	80032ce <UART_SetConfig+0x19a>
 80032c0:	231b      	movs	r3, #27
 80032c2:	2220      	movs	r2, #32
 80032c4:	189b      	adds	r3, r3, r2
 80032c6:	19db      	adds	r3, r3, r7
 80032c8:	2200      	movs	r2, #0
 80032ca:	701a      	strb	r2, [r3, #0]
 80032cc:	e055      	b.n	800337a <UART_SetConfig+0x246>
 80032ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a5c      	ldr	r2, [pc, #368]	@ (8003444 <UART_SetConfig+0x310>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d106      	bne.n	80032e6 <UART_SetConfig+0x1b2>
 80032d8:	231b      	movs	r3, #27
 80032da:	2220      	movs	r2, #32
 80032dc:	189b      	adds	r3, r3, r2
 80032de:	19db      	adds	r3, r3, r7
 80032e0:	2200      	movs	r2, #0
 80032e2:	701a      	strb	r2, [r3, #0]
 80032e4:	e049      	b.n	800337a <UART_SetConfig+0x246>
 80032e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a50      	ldr	r2, [pc, #320]	@ (800342c <UART_SetConfig+0x2f8>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d13e      	bne.n	800336e <UART_SetConfig+0x23a>
 80032f0:	4b51      	ldr	r3, [pc, #324]	@ (8003438 <UART_SetConfig+0x304>)
 80032f2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80032f4:	23c0      	movs	r3, #192	@ 0xc0
 80032f6:	011b      	lsls	r3, r3, #4
 80032f8:	4013      	ands	r3, r2
 80032fa:	22c0      	movs	r2, #192	@ 0xc0
 80032fc:	0112      	lsls	r2, r2, #4
 80032fe:	4293      	cmp	r3, r2
 8003300:	d027      	beq.n	8003352 <UART_SetConfig+0x21e>
 8003302:	22c0      	movs	r2, #192	@ 0xc0
 8003304:	0112      	lsls	r2, r2, #4
 8003306:	4293      	cmp	r3, r2
 8003308:	d82a      	bhi.n	8003360 <UART_SetConfig+0x22c>
 800330a:	2280      	movs	r2, #128	@ 0x80
 800330c:	0112      	lsls	r2, r2, #4
 800330e:	4293      	cmp	r3, r2
 8003310:	d011      	beq.n	8003336 <UART_SetConfig+0x202>
 8003312:	2280      	movs	r2, #128	@ 0x80
 8003314:	0112      	lsls	r2, r2, #4
 8003316:	4293      	cmp	r3, r2
 8003318:	d822      	bhi.n	8003360 <UART_SetConfig+0x22c>
 800331a:	2b00      	cmp	r3, #0
 800331c:	d004      	beq.n	8003328 <UART_SetConfig+0x1f4>
 800331e:	2280      	movs	r2, #128	@ 0x80
 8003320:	00d2      	lsls	r2, r2, #3
 8003322:	4293      	cmp	r3, r2
 8003324:	d00e      	beq.n	8003344 <UART_SetConfig+0x210>
 8003326:	e01b      	b.n	8003360 <UART_SetConfig+0x22c>
 8003328:	231b      	movs	r3, #27
 800332a:	2220      	movs	r2, #32
 800332c:	189b      	adds	r3, r3, r2
 800332e:	19db      	adds	r3, r3, r7
 8003330:	2200      	movs	r2, #0
 8003332:	701a      	strb	r2, [r3, #0]
 8003334:	e021      	b.n	800337a <UART_SetConfig+0x246>
 8003336:	231b      	movs	r3, #27
 8003338:	2220      	movs	r2, #32
 800333a:	189b      	adds	r3, r3, r2
 800333c:	19db      	adds	r3, r3, r7
 800333e:	2202      	movs	r2, #2
 8003340:	701a      	strb	r2, [r3, #0]
 8003342:	e01a      	b.n	800337a <UART_SetConfig+0x246>
 8003344:	231b      	movs	r3, #27
 8003346:	2220      	movs	r2, #32
 8003348:	189b      	adds	r3, r3, r2
 800334a:	19db      	adds	r3, r3, r7
 800334c:	2204      	movs	r2, #4
 800334e:	701a      	strb	r2, [r3, #0]
 8003350:	e013      	b.n	800337a <UART_SetConfig+0x246>
 8003352:	231b      	movs	r3, #27
 8003354:	2220      	movs	r2, #32
 8003356:	189b      	adds	r3, r3, r2
 8003358:	19db      	adds	r3, r3, r7
 800335a:	2208      	movs	r2, #8
 800335c:	701a      	strb	r2, [r3, #0]
 800335e:	e00c      	b.n	800337a <UART_SetConfig+0x246>
 8003360:	231b      	movs	r3, #27
 8003362:	2220      	movs	r2, #32
 8003364:	189b      	adds	r3, r3, r2
 8003366:	19db      	adds	r3, r3, r7
 8003368:	2210      	movs	r2, #16
 800336a:	701a      	strb	r2, [r3, #0]
 800336c:	e005      	b.n	800337a <UART_SetConfig+0x246>
 800336e:	231b      	movs	r3, #27
 8003370:	2220      	movs	r2, #32
 8003372:	189b      	adds	r3, r3, r2
 8003374:	19db      	adds	r3, r3, r7
 8003376:	2210      	movs	r2, #16
 8003378:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800337a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a2b      	ldr	r2, [pc, #172]	@ (800342c <UART_SetConfig+0x2f8>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d000      	beq.n	8003386 <UART_SetConfig+0x252>
 8003384:	e0a9      	b.n	80034da <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003386:	231b      	movs	r3, #27
 8003388:	2220      	movs	r2, #32
 800338a:	189b      	adds	r3, r3, r2
 800338c:	19db      	adds	r3, r3, r7
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2b08      	cmp	r3, #8
 8003392:	d015      	beq.n	80033c0 <UART_SetConfig+0x28c>
 8003394:	dc18      	bgt.n	80033c8 <UART_SetConfig+0x294>
 8003396:	2b04      	cmp	r3, #4
 8003398:	d00d      	beq.n	80033b6 <UART_SetConfig+0x282>
 800339a:	dc15      	bgt.n	80033c8 <UART_SetConfig+0x294>
 800339c:	2b00      	cmp	r3, #0
 800339e:	d002      	beq.n	80033a6 <UART_SetConfig+0x272>
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d005      	beq.n	80033b0 <UART_SetConfig+0x27c>
 80033a4:	e010      	b.n	80033c8 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033a6:	f7fe fc43 	bl	8001c30 <HAL_RCC_GetPCLK1Freq>
 80033aa:	0003      	movs	r3, r0
 80033ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80033ae:	e014      	b.n	80033da <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033b0:	4b25      	ldr	r3, [pc, #148]	@ (8003448 <UART_SetConfig+0x314>)
 80033b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80033b4:	e011      	b.n	80033da <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033b6:	f7fe fbaf 	bl	8001b18 <HAL_RCC_GetSysClockFreq>
 80033ba:	0003      	movs	r3, r0
 80033bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80033be:	e00c      	b.n	80033da <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033c0:	2380      	movs	r3, #128	@ 0x80
 80033c2:	021b      	lsls	r3, r3, #8
 80033c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80033c6:	e008      	b.n	80033da <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80033cc:	231a      	movs	r3, #26
 80033ce:	2220      	movs	r2, #32
 80033d0:	189b      	adds	r3, r3, r2
 80033d2:	19db      	adds	r3, r3, r7
 80033d4:	2201      	movs	r2, #1
 80033d6:	701a      	strb	r2, [r3, #0]
        break;
 80033d8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80033da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d100      	bne.n	80033e2 <UART_SetConfig+0x2ae>
 80033e0:	e14b      	b.n	800367a <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80033e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033e6:	4b19      	ldr	r3, [pc, #100]	@ (800344c <UART_SetConfig+0x318>)
 80033e8:	0052      	lsls	r2, r2, #1
 80033ea:	5ad3      	ldrh	r3, [r2, r3]
 80033ec:	0019      	movs	r1, r3
 80033ee:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80033f0:	f7fc fe8a 	bl	8000108 <__udivsi3>
 80033f4:	0003      	movs	r3, r0
 80033f6:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80033f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	0013      	movs	r3, r2
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	189b      	adds	r3, r3, r2
 8003402:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003404:	429a      	cmp	r2, r3
 8003406:	d305      	bcc.n	8003414 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800340e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003410:	429a      	cmp	r2, r3
 8003412:	d91d      	bls.n	8003450 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003414:	231a      	movs	r3, #26
 8003416:	2220      	movs	r2, #32
 8003418:	189b      	adds	r3, r3, r2
 800341a:	19db      	adds	r3, r3, r7
 800341c:	2201      	movs	r2, #1
 800341e:	701a      	strb	r2, [r3, #0]
 8003420:	e12b      	b.n	800367a <UART_SetConfig+0x546>
 8003422:	46c0      	nop			@ (mov r8, r8)
 8003424:	cfff69f3 	.word	0xcfff69f3
 8003428:	ffffcfff 	.word	0xffffcfff
 800342c:	40008000 	.word	0x40008000
 8003430:	11fff4ff 	.word	0x11fff4ff
 8003434:	40013800 	.word	0x40013800
 8003438:	40021000 	.word	0x40021000
 800343c:	40004400 	.word	0x40004400
 8003440:	40004800 	.word	0x40004800
 8003444:	40004c00 	.word	0x40004c00
 8003448:	00f42400 	.word	0x00f42400
 800344c:	08003c3c 	.word	0x08003c3c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003452:	61bb      	str	r3, [r7, #24]
 8003454:	2300      	movs	r3, #0
 8003456:	61fb      	str	r3, [r7, #28]
 8003458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800345a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800345c:	4b92      	ldr	r3, [pc, #584]	@ (80036a8 <UART_SetConfig+0x574>)
 800345e:	0052      	lsls	r2, r2, #1
 8003460:	5ad3      	ldrh	r3, [r2, r3]
 8003462:	613b      	str	r3, [r7, #16]
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	69b8      	ldr	r0, [r7, #24]
 800346e:	69f9      	ldr	r1, [r7, #28]
 8003470:	f7fc fed6 	bl	8000220 <__aeabi_uldivmod>
 8003474:	0002      	movs	r2, r0
 8003476:	000b      	movs	r3, r1
 8003478:	0e11      	lsrs	r1, r2, #24
 800347a:	021d      	lsls	r5, r3, #8
 800347c:	430d      	orrs	r5, r1
 800347e:	0214      	lsls	r4, r2, #8
 8003480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	085b      	lsrs	r3, r3, #1
 8003486:	60bb      	str	r3, [r7, #8]
 8003488:	2300      	movs	r3, #0
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	68b8      	ldr	r0, [r7, #8]
 800348e:	68f9      	ldr	r1, [r7, #12]
 8003490:	1900      	adds	r0, r0, r4
 8003492:	4169      	adcs	r1, r5
 8003494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	603b      	str	r3, [r7, #0]
 800349a:	2300      	movs	r3, #0
 800349c:	607b      	str	r3, [r7, #4]
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f7fc febd 	bl	8000220 <__aeabi_uldivmod>
 80034a6:	0002      	movs	r2, r0
 80034a8:	000b      	movs	r3, r1
 80034aa:	0013      	movs	r3, r2
 80034ac:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034b0:	23c0      	movs	r3, #192	@ 0xc0
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d309      	bcc.n	80034cc <UART_SetConfig+0x398>
 80034b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034ba:	2380      	movs	r3, #128	@ 0x80
 80034bc:	035b      	lsls	r3, r3, #13
 80034be:	429a      	cmp	r2, r3
 80034c0:	d204      	bcs.n	80034cc <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80034c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034c8:	60da      	str	r2, [r3, #12]
 80034ca:	e0d6      	b.n	800367a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80034cc:	231a      	movs	r3, #26
 80034ce:	2220      	movs	r2, #32
 80034d0:	189b      	adds	r3, r3, r2
 80034d2:	19db      	adds	r3, r3, r7
 80034d4:	2201      	movs	r2, #1
 80034d6:	701a      	strb	r2, [r3, #0]
 80034d8:	e0cf      	b.n	800367a <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034dc:	69da      	ldr	r2, [r3, #28]
 80034de:	2380      	movs	r3, #128	@ 0x80
 80034e0:	021b      	lsls	r3, r3, #8
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d000      	beq.n	80034e8 <UART_SetConfig+0x3b4>
 80034e6:	e070      	b.n	80035ca <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80034e8:	231b      	movs	r3, #27
 80034ea:	2220      	movs	r2, #32
 80034ec:	189b      	adds	r3, r3, r2
 80034ee:	19db      	adds	r3, r3, r7
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d015      	beq.n	8003522 <UART_SetConfig+0x3ee>
 80034f6:	dc18      	bgt.n	800352a <UART_SetConfig+0x3f6>
 80034f8:	2b04      	cmp	r3, #4
 80034fa:	d00d      	beq.n	8003518 <UART_SetConfig+0x3e4>
 80034fc:	dc15      	bgt.n	800352a <UART_SetConfig+0x3f6>
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d002      	beq.n	8003508 <UART_SetConfig+0x3d4>
 8003502:	2b02      	cmp	r3, #2
 8003504:	d005      	beq.n	8003512 <UART_SetConfig+0x3de>
 8003506:	e010      	b.n	800352a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003508:	f7fe fb92 	bl	8001c30 <HAL_RCC_GetPCLK1Freq>
 800350c:	0003      	movs	r3, r0
 800350e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003510:	e014      	b.n	800353c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003512:	4b66      	ldr	r3, [pc, #408]	@ (80036ac <UART_SetConfig+0x578>)
 8003514:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003516:	e011      	b.n	800353c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003518:	f7fe fafe 	bl	8001b18 <HAL_RCC_GetSysClockFreq>
 800351c:	0003      	movs	r3, r0
 800351e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003520:	e00c      	b.n	800353c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003522:	2380      	movs	r3, #128	@ 0x80
 8003524:	021b      	lsls	r3, r3, #8
 8003526:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003528:	e008      	b.n	800353c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800352a:	2300      	movs	r3, #0
 800352c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800352e:	231a      	movs	r3, #26
 8003530:	2220      	movs	r2, #32
 8003532:	189b      	adds	r3, r3, r2
 8003534:	19db      	adds	r3, r3, r7
 8003536:	2201      	movs	r2, #1
 8003538:	701a      	strb	r2, [r3, #0]
        break;
 800353a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800353c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800353e:	2b00      	cmp	r3, #0
 8003540:	d100      	bne.n	8003544 <UART_SetConfig+0x410>
 8003542:	e09a      	b.n	800367a <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003546:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003548:	4b57      	ldr	r3, [pc, #348]	@ (80036a8 <UART_SetConfig+0x574>)
 800354a:	0052      	lsls	r2, r2, #1
 800354c:	5ad3      	ldrh	r3, [r2, r3]
 800354e:	0019      	movs	r1, r3
 8003550:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003552:	f7fc fdd9 	bl	8000108 <__udivsi3>
 8003556:	0003      	movs	r3, r0
 8003558:	005a      	lsls	r2, r3, #1
 800355a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	085b      	lsrs	r3, r3, #1
 8003560:	18d2      	adds	r2, r2, r3
 8003562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	0019      	movs	r1, r3
 8003568:	0010      	movs	r0, r2
 800356a:	f7fc fdcd 	bl	8000108 <__udivsi3>
 800356e:	0003      	movs	r3, r0
 8003570:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003574:	2b0f      	cmp	r3, #15
 8003576:	d921      	bls.n	80035bc <UART_SetConfig+0x488>
 8003578:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800357a:	2380      	movs	r3, #128	@ 0x80
 800357c:	025b      	lsls	r3, r3, #9
 800357e:	429a      	cmp	r2, r3
 8003580:	d21c      	bcs.n	80035bc <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003584:	b29a      	uxth	r2, r3
 8003586:	200e      	movs	r0, #14
 8003588:	2420      	movs	r4, #32
 800358a:	1903      	adds	r3, r0, r4
 800358c:	19db      	adds	r3, r3, r7
 800358e:	210f      	movs	r1, #15
 8003590:	438a      	bics	r2, r1
 8003592:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003596:	085b      	lsrs	r3, r3, #1
 8003598:	b29b      	uxth	r3, r3
 800359a:	2207      	movs	r2, #7
 800359c:	4013      	ands	r3, r2
 800359e:	b299      	uxth	r1, r3
 80035a0:	1903      	adds	r3, r0, r4
 80035a2:	19db      	adds	r3, r3, r7
 80035a4:	1902      	adds	r2, r0, r4
 80035a6:	19d2      	adds	r2, r2, r7
 80035a8:	8812      	ldrh	r2, [r2, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80035ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	1902      	adds	r2, r0, r4
 80035b4:	19d2      	adds	r2, r2, r7
 80035b6:	8812      	ldrh	r2, [r2, #0]
 80035b8:	60da      	str	r2, [r3, #12]
 80035ba:	e05e      	b.n	800367a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80035bc:	231a      	movs	r3, #26
 80035be:	2220      	movs	r2, #32
 80035c0:	189b      	adds	r3, r3, r2
 80035c2:	19db      	adds	r3, r3, r7
 80035c4:	2201      	movs	r2, #1
 80035c6:	701a      	strb	r2, [r3, #0]
 80035c8:	e057      	b.n	800367a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035ca:	231b      	movs	r3, #27
 80035cc:	2220      	movs	r2, #32
 80035ce:	189b      	adds	r3, r3, r2
 80035d0:	19db      	adds	r3, r3, r7
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d015      	beq.n	8003604 <UART_SetConfig+0x4d0>
 80035d8:	dc18      	bgt.n	800360c <UART_SetConfig+0x4d8>
 80035da:	2b04      	cmp	r3, #4
 80035dc:	d00d      	beq.n	80035fa <UART_SetConfig+0x4c6>
 80035de:	dc15      	bgt.n	800360c <UART_SetConfig+0x4d8>
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d002      	beq.n	80035ea <UART_SetConfig+0x4b6>
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d005      	beq.n	80035f4 <UART_SetConfig+0x4c0>
 80035e8:	e010      	b.n	800360c <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035ea:	f7fe fb21 	bl	8001c30 <HAL_RCC_GetPCLK1Freq>
 80035ee:	0003      	movs	r3, r0
 80035f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80035f2:	e014      	b.n	800361e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035f4:	4b2d      	ldr	r3, [pc, #180]	@ (80036ac <UART_SetConfig+0x578>)
 80035f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80035f8:	e011      	b.n	800361e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035fa:	f7fe fa8d 	bl	8001b18 <HAL_RCC_GetSysClockFreq>
 80035fe:	0003      	movs	r3, r0
 8003600:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003602:	e00c      	b.n	800361e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003604:	2380      	movs	r3, #128	@ 0x80
 8003606:	021b      	lsls	r3, r3, #8
 8003608:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800360a:	e008      	b.n	800361e <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 800360c:	2300      	movs	r3, #0
 800360e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003610:	231a      	movs	r3, #26
 8003612:	2220      	movs	r2, #32
 8003614:	189b      	adds	r3, r3, r2
 8003616:	19db      	adds	r3, r3, r7
 8003618:	2201      	movs	r2, #1
 800361a:	701a      	strb	r2, [r3, #0]
        break;
 800361c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800361e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003620:	2b00      	cmp	r3, #0
 8003622:	d02a      	beq.n	800367a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003626:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003628:	4b1f      	ldr	r3, [pc, #124]	@ (80036a8 <UART_SetConfig+0x574>)
 800362a:	0052      	lsls	r2, r2, #1
 800362c:	5ad3      	ldrh	r3, [r2, r3]
 800362e:	0019      	movs	r1, r3
 8003630:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003632:	f7fc fd69 	bl	8000108 <__udivsi3>
 8003636:	0003      	movs	r3, r0
 8003638:	001a      	movs	r2, r3
 800363a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	085b      	lsrs	r3, r3, #1
 8003640:	18d2      	adds	r2, r2, r3
 8003642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	0019      	movs	r1, r3
 8003648:	0010      	movs	r0, r2
 800364a:	f7fc fd5d 	bl	8000108 <__udivsi3>
 800364e:	0003      	movs	r3, r0
 8003650:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003654:	2b0f      	cmp	r3, #15
 8003656:	d90a      	bls.n	800366e <UART_SetConfig+0x53a>
 8003658:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800365a:	2380      	movs	r3, #128	@ 0x80
 800365c:	025b      	lsls	r3, r3, #9
 800365e:	429a      	cmp	r2, r3
 8003660:	d205      	bcs.n	800366e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003664:	b29a      	uxth	r2, r3
 8003666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	60da      	str	r2, [r3, #12]
 800366c:	e005      	b.n	800367a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800366e:	231a      	movs	r3, #26
 8003670:	2220      	movs	r2, #32
 8003672:	189b      	adds	r3, r3, r2
 8003674:	19db      	adds	r3, r3, r7
 8003676:	2201      	movs	r2, #1
 8003678:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800367a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367c:	226a      	movs	r2, #106	@ 0x6a
 800367e:	2101      	movs	r1, #1
 8003680:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003684:	2268      	movs	r2, #104	@ 0x68
 8003686:	2101      	movs	r1, #1
 8003688:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800368a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368c:	2200      	movs	r2, #0
 800368e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003692:	2200      	movs	r2, #0
 8003694:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003696:	231a      	movs	r3, #26
 8003698:	2220      	movs	r2, #32
 800369a:	189b      	adds	r3, r3, r2
 800369c:	19db      	adds	r3, r3, r7
 800369e:	781b      	ldrb	r3, [r3, #0]
}
 80036a0:	0018      	movs	r0, r3
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b010      	add	sp, #64	@ 0x40
 80036a6:	bdb0      	pop	{r4, r5, r7, pc}
 80036a8:	08003c3c 	.word	0x08003c3c
 80036ac:	00f42400 	.word	0x00f42400

080036b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036bc:	2208      	movs	r2, #8
 80036be:	4013      	ands	r3, r2
 80036c0:	d00b      	beq.n	80036da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	4a4a      	ldr	r2, [pc, #296]	@ (80037f4 <UART_AdvFeatureConfig+0x144>)
 80036ca:	4013      	ands	r3, r2
 80036cc:	0019      	movs	r1, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036de:	2201      	movs	r2, #1
 80036e0:	4013      	ands	r3, r2
 80036e2:	d00b      	beq.n	80036fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	4a43      	ldr	r2, [pc, #268]	@ (80037f8 <UART_AdvFeatureConfig+0x148>)
 80036ec:	4013      	ands	r3, r2
 80036ee:	0019      	movs	r1, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003700:	2202      	movs	r2, #2
 8003702:	4013      	ands	r3, r2
 8003704:	d00b      	beq.n	800371e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	4a3b      	ldr	r2, [pc, #236]	@ (80037fc <UART_AdvFeatureConfig+0x14c>)
 800370e:	4013      	ands	r3, r2
 8003710:	0019      	movs	r1, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003722:	2204      	movs	r2, #4
 8003724:	4013      	ands	r3, r2
 8003726:	d00b      	beq.n	8003740 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	4a34      	ldr	r2, [pc, #208]	@ (8003800 <UART_AdvFeatureConfig+0x150>)
 8003730:	4013      	ands	r3, r2
 8003732:	0019      	movs	r1, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003744:	2210      	movs	r2, #16
 8003746:	4013      	ands	r3, r2
 8003748:	d00b      	beq.n	8003762 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	4a2c      	ldr	r2, [pc, #176]	@ (8003804 <UART_AdvFeatureConfig+0x154>)
 8003752:	4013      	ands	r3, r2
 8003754:	0019      	movs	r1, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003766:	2220      	movs	r2, #32
 8003768:	4013      	ands	r3, r2
 800376a:	d00b      	beq.n	8003784 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	4a25      	ldr	r2, [pc, #148]	@ (8003808 <UART_AdvFeatureConfig+0x158>)
 8003774:	4013      	ands	r3, r2
 8003776:	0019      	movs	r1, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003788:	2240      	movs	r2, #64	@ 0x40
 800378a:	4013      	ands	r3, r2
 800378c:	d01d      	beq.n	80037ca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	4a1d      	ldr	r2, [pc, #116]	@ (800380c <UART_AdvFeatureConfig+0x15c>)
 8003796:	4013      	ands	r3, r2
 8003798:	0019      	movs	r1, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037aa:	2380      	movs	r3, #128	@ 0x80
 80037ac:	035b      	lsls	r3, r3, #13
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d10b      	bne.n	80037ca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	4a15      	ldr	r2, [pc, #84]	@ (8003810 <UART_AdvFeatureConfig+0x160>)
 80037ba:	4013      	ands	r3, r2
 80037bc:	0019      	movs	r1, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ce:	2280      	movs	r2, #128	@ 0x80
 80037d0:	4013      	ands	r3, r2
 80037d2:	d00b      	beq.n	80037ec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	4a0e      	ldr	r2, [pc, #56]	@ (8003814 <UART_AdvFeatureConfig+0x164>)
 80037dc:	4013      	ands	r3, r2
 80037de:	0019      	movs	r1, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	605a      	str	r2, [r3, #4]
  }
}
 80037ec:	46c0      	nop			@ (mov r8, r8)
 80037ee:	46bd      	mov	sp, r7
 80037f0:	b002      	add	sp, #8
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	ffff7fff 	.word	0xffff7fff
 80037f8:	fffdffff 	.word	0xfffdffff
 80037fc:	fffeffff 	.word	0xfffeffff
 8003800:	fffbffff 	.word	0xfffbffff
 8003804:	ffffefff 	.word	0xffffefff
 8003808:	ffffdfff 	.word	0xffffdfff
 800380c:	ffefffff 	.word	0xffefffff
 8003810:	ff9fffff 	.word	0xff9fffff
 8003814:	fff7ffff 	.word	0xfff7ffff

08003818 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b092      	sub	sp, #72	@ 0x48
 800381c:	af02      	add	r7, sp, #8
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2290      	movs	r2, #144	@ 0x90
 8003824:	2100      	movs	r1, #0
 8003826:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003828:	f7fd fac8 	bl	8000dbc <HAL_GetTick>
 800382c:	0003      	movs	r3, r0
 800382e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2208      	movs	r2, #8
 8003838:	4013      	ands	r3, r2
 800383a:	2b08      	cmp	r3, #8
 800383c:	d12d      	bne.n	800389a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800383e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003840:	2280      	movs	r2, #128	@ 0x80
 8003842:	0391      	lsls	r1, r2, #14
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	4a47      	ldr	r2, [pc, #284]	@ (8003964 <UART_CheckIdleState+0x14c>)
 8003848:	9200      	str	r2, [sp, #0]
 800384a:	2200      	movs	r2, #0
 800384c:	f000 f88e 	bl	800396c <UART_WaitOnFlagUntilTimeout>
 8003850:	1e03      	subs	r3, r0, #0
 8003852:	d022      	beq.n	800389a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003854:	f3ef 8310 	mrs	r3, PRIMASK
 8003858:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800385a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800385c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800385e:	2301      	movs	r3, #1
 8003860:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003864:	f383 8810 	msr	PRIMASK, r3
}
 8003868:	46c0      	nop			@ (mov r8, r8)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2180      	movs	r1, #128	@ 0x80
 8003876:	438a      	bics	r2, r1
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800387c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800387e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003880:	f383 8810 	msr	PRIMASK, r3
}
 8003884:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2288      	movs	r2, #136	@ 0x88
 800388a:	2120      	movs	r1, #32
 800388c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2284      	movs	r2, #132	@ 0x84
 8003892:	2100      	movs	r1, #0
 8003894:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e060      	b.n	800395c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2204      	movs	r2, #4
 80038a2:	4013      	ands	r3, r2
 80038a4:	2b04      	cmp	r3, #4
 80038a6:	d146      	bne.n	8003936 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038aa:	2280      	movs	r2, #128	@ 0x80
 80038ac:	03d1      	lsls	r1, r2, #15
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	4a2c      	ldr	r2, [pc, #176]	@ (8003964 <UART_CheckIdleState+0x14c>)
 80038b2:	9200      	str	r2, [sp, #0]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f000 f859 	bl	800396c <UART_WaitOnFlagUntilTimeout>
 80038ba:	1e03      	subs	r3, r0, #0
 80038bc:	d03b      	beq.n	8003936 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038be:	f3ef 8310 	mrs	r3, PRIMASK
 80038c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80038c4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80038c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80038c8:	2301      	movs	r3, #1
 80038ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f383 8810 	msr	PRIMASK, r3
}
 80038d2:	46c0      	nop			@ (mov r8, r8)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4922      	ldr	r1, [pc, #136]	@ (8003968 <UART_CheckIdleState+0x150>)
 80038e0:	400a      	ands	r2, r1
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f383 8810 	msr	PRIMASK, r3
}
 80038ee:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038f0:	f3ef 8310 	mrs	r3, PRIMASK
 80038f4:	61bb      	str	r3, [r7, #24]
  return(result);
 80038f6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80038fa:	2301      	movs	r3, #1
 80038fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	f383 8810 	msr	PRIMASK, r3
}
 8003904:	46c0      	nop			@ (mov r8, r8)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2101      	movs	r1, #1
 8003912:	438a      	bics	r2, r1
 8003914:	609a      	str	r2, [r3, #8]
 8003916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003918:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800391a:	6a3b      	ldr	r3, [r7, #32]
 800391c:	f383 8810 	msr	PRIMASK, r3
}
 8003920:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	228c      	movs	r2, #140	@ 0x8c
 8003926:	2120      	movs	r1, #32
 8003928:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2284      	movs	r2, #132	@ 0x84
 800392e:	2100      	movs	r1, #0
 8003930:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e012      	b.n	800395c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2288      	movs	r2, #136	@ 0x88
 800393a:	2120      	movs	r1, #32
 800393c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	228c      	movs	r2, #140	@ 0x8c
 8003942:	2120      	movs	r1, #32
 8003944:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2284      	movs	r2, #132	@ 0x84
 8003956:	2100      	movs	r1, #0
 8003958:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	0018      	movs	r0, r3
 800395e:	46bd      	mov	sp, r7
 8003960:	b010      	add	sp, #64	@ 0x40
 8003962:	bd80      	pop	{r7, pc}
 8003964:	01ffffff 	.word	0x01ffffff
 8003968:	fffffedf 	.word	0xfffffedf

0800396c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	603b      	str	r3, [r7, #0]
 8003978:	1dfb      	adds	r3, r7, #7
 800397a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800397c:	e051      	b.n	8003a22 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	3301      	adds	r3, #1
 8003982:	d04e      	beq.n	8003a22 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003984:	f7fd fa1a 	bl	8000dbc <HAL_GetTick>
 8003988:	0002      	movs	r2, r0
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	429a      	cmp	r2, r3
 8003992:	d302      	bcc.n	800399a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e051      	b.n	8003a42 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2204      	movs	r2, #4
 80039a6:	4013      	ands	r3, r2
 80039a8:	d03b      	beq.n	8003a22 <UART_WaitOnFlagUntilTimeout+0xb6>
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	2b80      	cmp	r3, #128	@ 0x80
 80039ae:	d038      	beq.n	8003a22 <UART_WaitOnFlagUntilTimeout+0xb6>
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	2b40      	cmp	r3, #64	@ 0x40
 80039b4:	d035      	beq.n	8003a22 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	2208      	movs	r2, #8
 80039be:	4013      	ands	r3, r2
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d111      	bne.n	80039e8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2208      	movs	r2, #8
 80039ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	0018      	movs	r0, r3
 80039d0:	f000 f83c 	bl	8003a4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2290      	movs	r2, #144	@ 0x90
 80039d8:	2108      	movs	r1, #8
 80039da:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2284      	movs	r2, #132	@ 0x84
 80039e0:	2100      	movs	r1, #0
 80039e2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e02c      	b.n	8003a42 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	69da      	ldr	r2, [r3, #28]
 80039ee:	2380      	movs	r3, #128	@ 0x80
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	401a      	ands	r2, r3
 80039f4:	2380      	movs	r3, #128	@ 0x80
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d112      	bne.n	8003a22 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2280      	movs	r2, #128	@ 0x80
 8003a02:	0112      	lsls	r2, r2, #4
 8003a04:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f000 f81f 	bl	8003a4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2290      	movs	r2, #144	@ 0x90
 8003a12:	2120      	movs	r1, #32
 8003a14:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2284      	movs	r2, #132	@ 0x84
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e00f      	b.n	8003a42 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	425a      	negs	r2, r3
 8003a32:	4153      	adcs	r3, r2
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	001a      	movs	r2, r3
 8003a38:	1dfb      	adds	r3, r7, #7
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d09e      	beq.n	800397e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	0018      	movs	r0, r3
 8003a44:	46bd      	mov	sp, r7
 8003a46:	b004      	add	sp, #16
 8003a48:	bd80      	pop	{r7, pc}
	...

08003a4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b08e      	sub	sp, #56	@ 0x38
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a54:	f3ef 8310 	mrs	r3, PRIMASK
 8003a58:	617b      	str	r3, [r7, #20]
  return(result);
 8003a5a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a5e:	2301      	movs	r3, #1
 8003a60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	f383 8810 	msr	PRIMASK, r3
}
 8003a68:	46c0      	nop			@ (mov r8, r8)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4926      	ldr	r1, [pc, #152]	@ (8003b10 <UART_EndRxTransfer+0xc4>)
 8003a76:	400a      	ands	r2, r1
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	f383 8810 	msr	PRIMASK, r3
}
 8003a84:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a86:	f3ef 8310 	mrs	r3, PRIMASK
 8003a8a:	623b      	str	r3, [r7, #32]
  return(result);
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003a8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a90:	2301      	movs	r3, #1
 8003a92:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a96:	f383 8810 	msr	PRIMASK, r3
}
 8003a9a:	46c0      	nop			@ (mov r8, r8)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689a      	ldr	r2, [r3, #8]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	491b      	ldr	r1, [pc, #108]	@ (8003b14 <UART_EndRxTransfer+0xc8>)
 8003aa8:	400a      	ands	r2, r1
 8003aaa:	609a      	str	r2, [r3, #8]
 8003aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aae:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab2:	f383 8810 	msr	PRIMASK, r3
}
 8003ab6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d118      	bne.n	8003af2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ac0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ac4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ac6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003aca:	2301      	movs	r3, #1
 8003acc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f383 8810 	msr	PRIMASK, r3
}
 8003ad4:	46c0      	nop			@ (mov r8, r8)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2110      	movs	r1, #16
 8003ae2:	438a      	bics	r2, r1
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ae8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	f383 8810 	msr	PRIMASK, r3
}
 8003af0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	228c      	movs	r2, #140	@ 0x8c
 8003af6:	2120      	movs	r1, #32
 8003af8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003b06:	46c0      	nop			@ (mov r8, r8)
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	b00e      	add	sp, #56	@ 0x38
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	46c0      	nop			@ (mov r8, r8)
 8003b10:	fffffedf 	.word	0xfffffedf
 8003b14:	effffffe 	.word	0xeffffffe

08003b18 <memset>:
 8003b18:	0003      	movs	r3, r0
 8003b1a:	1882      	adds	r2, r0, r2
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d100      	bne.n	8003b22 <memset+0xa>
 8003b20:	4770      	bx	lr
 8003b22:	7019      	strb	r1, [r3, #0]
 8003b24:	3301      	adds	r3, #1
 8003b26:	e7f9      	b.n	8003b1c <memset+0x4>

08003b28 <__libc_init_array>:
 8003b28:	b570      	push	{r4, r5, r6, lr}
 8003b2a:	2600      	movs	r6, #0
 8003b2c:	4c0c      	ldr	r4, [pc, #48]	@ (8003b60 <__libc_init_array+0x38>)
 8003b2e:	4d0d      	ldr	r5, [pc, #52]	@ (8003b64 <__libc_init_array+0x3c>)
 8003b30:	1b64      	subs	r4, r4, r5
 8003b32:	10a4      	asrs	r4, r4, #2
 8003b34:	42a6      	cmp	r6, r4
 8003b36:	d109      	bne.n	8003b4c <__libc_init_array+0x24>
 8003b38:	2600      	movs	r6, #0
 8003b3a:	f000 f819 	bl	8003b70 <_init>
 8003b3e:	4c0a      	ldr	r4, [pc, #40]	@ (8003b68 <__libc_init_array+0x40>)
 8003b40:	4d0a      	ldr	r5, [pc, #40]	@ (8003b6c <__libc_init_array+0x44>)
 8003b42:	1b64      	subs	r4, r4, r5
 8003b44:	10a4      	asrs	r4, r4, #2
 8003b46:	42a6      	cmp	r6, r4
 8003b48:	d105      	bne.n	8003b56 <__libc_init_array+0x2e>
 8003b4a:	bd70      	pop	{r4, r5, r6, pc}
 8003b4c:	00b3      	lsls	r3, r6, #2
 8003b4e:	58eb      	ldr	r3, [r5, r3]
 8003b50:	4798      	blx	r3
 8003b52:	3601      	adds	r6, #1
 8003b54:	e7ee      	b.n	8003b34 <__libc_init_array+0xc>
 8003b56:	00b3      	lsls	r3, r6, #2
 8003b58:	58eb      	ldr	r3, [r5, r3]
 8003b5a:	4798      	blx	r3
 8003b5c:	3601      	adds	r6, #1
 8003b5e:	e7f2      	b.n	8003b46 <__libc_init_array+0x1e>
 8003b60:	08003c5c 	.word	0x08003c5c
 8003b64:	08003c5c 	.word	0x08003c5c
 8003b68:	08003c60 	.word	0x08003c60
 8003b6c:	08003c5c 	.word	0x08003c5c

08003b70 <_init>:
 8003b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b72:	46c0      	nop			@ (mov r8, r8)
 8003b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b76:	bc08      	pop	{r3}
 8003b78:	469e      	mov	lr, r3
 8003b7a:	4770      	bx	lr

08003b7c <_fini>:
 8003b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7e:	46c0      	nop			@ (mov r8, r8)
 8003b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b82:	bc08      	pop	{r3}
 8003b84:	469e      	mov	lr, r3
 8003b86:	4770      	bx	lr
